%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:3.0.2
%% Purpose: encoder and decoder to the types in mod RcsRpsMsg

-module('RcsRpsMsg').
-compile(nowarn_unused_vars).
-include("RcsRpsMsg.hrl").
-asn1_info([{vsn,'3.0.2'},
            {module,'RcsRpsMsg'},
            {options,[warnings,ber,errors,
 {cwd,"/home/wanglihe/work/rps_emulator"},
 {outdir,"/home/wanglihe/work/rps_emulator"},
 {i,"."},
 {i,"/home/wanglihe/work/rps_emulator"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_RcsRpsMessage'/2,
'enc_TerminationStruct'/2,
'enc_Cmd'/2,
'enc_IntraChannel'/2,
'enc_IntraChannelReply'/2,
'enc_ResInfo'/2,
'enc_IntraAdd'/2,
'enc_IntraIP4AddrList'/2,
'enc_Statistics'/2,
'enc_IntraIP4Addr'/2,
'enc_IntraModify'/2,
'enc_IntraModifyConfereeAttr'/2,
'enc_IntraConfPara'/2,
'enc_VolumeControlCode'/2,
'enc_IntraConfReserve'/2,
'enc_IntraConfAudioMix'/2,
'enc_IntraConfGainAgc'/2,
'enc_IntraConfGain'/2,
'enc_IntraConfVideoRoot'/2,
'enc_IntraConfVideoLyt'/2,
'enc_IntraConfVideoLytSel'/2,
'enc_IntraRegionList'/2,
'enc_IntraRegion'/2,
'enc_IntraCreateRoom'/2,
'enc_IntraConfStream'/2,
'enc_IntraConfStreamExt'/2,
'enc_IntraConfStreamAudioExt'/2,
'enc_IntraConfClamp'/2,
'enc_IntraConfStreamVideoExt'/2,
'enc_IntraMove'/2,
'enc_IntraDeleteRoom'/2,
'enc_IntraSignal'/2,
'enc_SignalValue'/2,
'enc_SdPc'/2,
'enc_An'/2,
'enc_AudioVideoFile'/2,
'enc_Vn'/2,
'enc_TTS'/2,
'enc_DateType'/2,
'enc_DigitsType'/2,
'enc_MoneyType'/2,
'enc_NumberType'/2,
'enc_TimeType'/2,
'enc_VarType'/2,
'enc_VAR'/2,
'enc_FileStruct'/2,
'enc_AudioVideo'/2,
'enc_VnTTS'/2,
'enc_FileArry'/2,
'enc_AuPa'/2,
'enc_ViPa'/2,
'enc_Mix'/2,
'enc_Volume'/2,
'enc_ConfPa'/2,
'enc_AuPc'/2,
'enc_ViPc'/2,
'enc_ConfPc'/2,
'enc_AuPr'/2,
'enc_ConfPr'/2,
'enc_ViPr'/2,
'enc_IntraEvent'/2,
'enc_NtNetfail'/2,
'enc_NtQualityalert'/2,
'enc_RtpPltrans'/2,
'enc_AuOc'/2,
'enc_AuOcReturn'/2,
'enc_PaReturnParam'/2,
'enc_PcReturnParam'/2,
'enc_PrReturnParam'/2,
'enc_IntraAddReply'/2,
'enc_IntraSubReply'/2,
'enc_IntraModifyReply'/2,
'enc_IntraEventReply'/2,
'enc_IntraStopReply'/2,
'enc_IntraAddConfirm'/2,
'enc_IntraBridge'/2,
'enc_IntraExitRoom'/2,
'enc_IntraNotification'/2,
'enc_TerminationStructList'/2,
'enc_IntraBytes'/2,
'enc_IntraRtsp'/2,
'enc_IntraRtspSetup'/2,
'enc_IntraRtspPlay'/2,
'enc_IntraRtspPause'/2,
'enc_IntraRtspRecord'/2,
'enc_IntraRtspRange'/2,
'enc_IntraRtspOpt'/2,
'enc_IntraRtspRep'/2,
'enc_IntraRtspDesRep'/2,
'enc_IntraOSD'/2,
'enc_IntraOSDRep'/2,
'enc_IntraOSDAdd'/2,
'enc_IntraOSDDelete'/2,
'enc_IntraOSDUpdate'/2,
'enc_IntraOSDHide'/2,
'enc_IntraOSDDisplay'/2,
'enc_OSDDirection'/2,
'enc_IntraOSDGroupList'/2,
'enc_IntraOSDGroup'/2,
'enc_IntraOSDGroupAttr'/2,
'enc_IntraOSDWallPaper'/2,
'enc_IntraOSDTextDescript'/2,
'enc_IntraOSDImageDescript'/2,
'enc_IntraTestAlive'/2
]).

-export([
'dec_RcsRpsMessage'/2,
'dec_TerminationStruct'/2,
'dec_Cmd'/2,
'dec_IntraChannel'/2,
'dec_IntraChannelReply'/2,
'dec_ResInfo'/2,
'dec_IntraAdd'/2,
'dec_IntraIP4AddrList'/2,
'dec_Statistics'/2,
'dec_IntraIP4Addr'/2,
'dec_IntraModify'/2,
'dec_IntraModifyConfereeAttr'/2,
'dec_IntraConfPara'/2,
'dec_VolumeControlCode'/2,
'dec_IntraConfReserve'/2,
'dec_IntraConfAudioMix'/2,
'dec_IntraConfGainAgc'/2,
'dec_IntraConfGain'/2,
'dec_IntraConfVideoRoot'/2,
'dec_IntraConfVideoLyt'/2,
'dec_IntraConfVideoLytSel'/2,
'dec_IntraRegionList'/2,
'dec_IntraRegion'/2,
'dec_IntraCreateRoom'/2,
'dec_IntraConfStream'/2,
'dec_IntraConfStreamExt'/2,
'dec_IntraConfStreamAudioExt'/2,
'dec_IntraConfClamp'/2,
'dec_IntraConfStreamVideoExt'/2,
'dec_IntraMove'/2,
'dec_IntraDeleteRoom'/2,
'dec_IntraSignal'/2,
'dec_SignalValue'/2,
'dec_SdPc'/2,
'dec_An'/2,
'dec_AudioVideoFile'/2,
'dec_Vn'/2,
'dec_TTS'/2,
'dec_DateType'/2,
'dec_DigitsType'/2,
'dec_MoneyType'/2,
'dec_NumberType'/2,
'dec_TimeType'/2,
'dec_VarType'/2,
'dec_VAR'/2,
'dec_FileStruct'/2,
'dec_AudioVideo'/2,
'dec_VnTTS'/2,
'dec_FileArry'/2,
'dec_AuPa'/2,
'dec_ViPa'/2,
'dec_Mix'/2,
'dec_Volume'/2,
'dec_ConfPa'/2,
'dec_AuPc'/2,
'dec_ViPc'/2,
'dec_ConfPc'/2,
'dec_AuPr'/2,
'dec_ConfPr'/2,
'dec_ViPr'/2,
'dec_IntraEvent'/2,
'dec_NtNetfail'/2,
'dec_NtQualityalert'/2,
'dec_RtpPltrans'/2,
'dec_AuOc'/2,
'dec_AuOcReturn'/2,
'dec_PaReturnParam'/2,
'dec_PcReturnParam'/2,
'dec_PrReturnParam'/2,
'dec_IntraAddReply'/2,
'dec_IntraSubReply'/2,
'dec_IntraModifyReply'/2,
'dec_IntraEventReply'/2,
'dec_IntraStopReply'/2,
'dec_IntraAddConfirm'/2,
'dec_IntraBridge'/2,
'dec_IntraExitRoom'/2,
'dec_IntraNotification'/2,
'dec_TerminationStructList'/2,
'dec_IntraBytes'/2,
'dec_IntraRtsp'/2,
'dec_IntraRtspSetup'/2,
'dec_IntraRtspPlay'/2,
'dec_IntraRtspPause'/2,
'dec_IntraRtspRecord'/2,
'dec_IntraRtspRange'/2,
'dec_IntraRtspOpt'/2,
'dec_IntraRtspRep'/2,
'dec_IntraRtspDesRep'/2,
'dec_IntraOSD'/2,
'dec_IntraOSDRep'/2,
'dec_IntraOSDAdd'/2,
'dec_IntraOSDDelete'/2,
'dec_IntraOSDUpdate'/2,
'dec_IntraOSDHide'/2,
'dec_IntraOSDDisplay'/2,
'dec_OSDDirection'/2,
'dec_IntraOSDGroupList'/2,
'dec_IntraOSDGroup'/2,
'dec_IntraOSDGroupAttr'/2,
'dec_IntraOSDWallPaper'/2,
'dec_IntraOSDTextDescript'/2,
'dec_IntraOSDImageDescript'/2,
'dec_IntraTestAlive'/2
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('RcsRpsMessage',Data) -> 'enc_RcsRpsMessage'(Data);
encode_disp('TerminationStruct',Data) -> 'enc_TerminationStruct'(Data);
encode_disp('Cmd',Data) -> 'enc_Cmd'(Data);
encode_disp('IntraChannel',Data) -> 'enc_IntraChannel'(Data);
encode_disp('IntraChannelReply',Data) -> 'enc_IntraChannelReply'(Data);
encode_disp('ResInfo',Data) -> 'enc_ResInfo'(Data);
encode_disp('IntraAdd',Data) -> 'enc_IntraAdd'(Data);
encode_disp('IntraIP4AddrList',Data) -> 'enc_IntraIP4AddrList'(Data);
encode_disp('Statistics',Data) -> 'enc_Statistics'(Data);
encode_disp('IntraIP4Addr',Data) -> 'enc_IntraIP4Addr'(Data);
encode_disp('IntraModify',Data) -> 'enc_IntraModify'(Data);
encode_disp('IntraModifyConfereeAttr',Data) -> 'enc_IntraModifyConfereeAttr'(Data);
encode_disp('IntraConfPara',Data) -> 'enc_IntraConfPara'(Data);
encode_disp('VolumeControlCode',Data) -> 'enc_VolumeControlCode'(Data);
encode_disp('IntraConfReserve',Data) -> 'enc_IntraConfReserve'(Data);
encode_disp('IntraConfAudioMix',Data) -> 'enc_IntraConfAudioMix'(Data);
encode_disp('IntraConfGainAgc',Data) -> 'enc_IntraConfGainAgc'(Data);
encode_disp('IntraConfGain',Data) -> 'enc_IntraConfGain'(Data);
encode_disp('IntraConfVideoRoot',Data) -> 'enc_IntraConfVideoRoot'(Data);
encode_disp('IntraConfVideoLyt',Data) -> 'enc_IntraConfVideoLyt'(Data);
encode_disp('IntraConfVideoLytSel',Data) -> 'enc_IntraConfVideoLytSel'(Data);
encode_disp('IntraRegionList',Data) -> 'enc_IntraRegionList'(Data);
encode_disp('IntraRegion',Data) -> 'enc_IntraRegion'(Data);
encode_disp('IntraCreateRoom',Data) -> 'enc_IntraCreateRoom'(Data);
encode_disp('IntraConfStream',Data) -> 'enc_IntraConfStream'(Data);
encode_disp('IntraConfStreamExt',Data) -> 'enc_IntraConfStreamExt'(Data);
encode_disp('IntraConfStreamAudioExt',Data) -> 'enc_IntraConfStreamAudioExt'(Data);
encode_disp('IntraConfClamp',Data) -> 'enc_IntraConfClamp'(Data);
encode_disp('IntraConfStreamVideoExt',Data) -> 'enc_IntraConfStreamVideoExt'(Data);
encode_disp('IntraMove',Data) -> 'enc_IntraMove'(Data);
encode_disp('IntraDeleteRoom',Data) -> 'enc_IntraDeleteRoom'(Data);
encode_disp('IntraSignal',Data) -> 'enc_IntraSignal'(Data);
encode_disp('SignalValue',Data) -> 'enc_SignalValue'(Data);
encode_disp('SdPc',Data) -> 'enc_SdPc'(Data);
encode_disp('An',Data) -> 'enc_An'(Data);
encode_disp('AudioVideoFile',Data) -> 'enc_AudioVideoFile'(Data);
encode_disp('Vn',Data) -> 'enc_Vn'(Data);
encode_disp('TTS',Data) -> 'enc_TTS'(Data);
encode_disp('DateType',Data) -> 'enc_DateType'(Data);
encode_disp('DigitsType',Data) -> 'enc_DigitsType'(Data);
encode_disp('MoneyType',Data) -> 'enc_MoneyType'(Data);
encode_disp('NumberType',Data) -> 'enc_NumberType'(Data);
encode_disp('TimeType',Data) -> 'enc_TimeType'(Data);
encode_disp('VarType',Data) -> 'enc_VarType'(Data);
encode_disp('VAR',Data) -> 'enc_VAR'(Data);
encode_disp('FileStruct',Data) -> 'enc_FileStruct'(Data);
encode_disp('AudioVideo',Data) -> 'enc_AudioVideo'(Data);
encode_disp('VnTTS',Data) -> 'enc_VnTTS'(Data);
encode_disp('FileArry',Data) -> 'enc_FileArry'(Data);
encode_disp('AuPa',Data) -> 'enc_AuPa'(Data);
encode_disp('ViPa',Data) -> 'enc_ViPa'(Data);
encode_disp('Mix',Data) -> 'enc_Mix'(Data);
encode_disp('Volume',Data) -> 'enc_Volume'(Data);
encode_disp('ConfPa',Data) -> 'enc_ConfPa'(Data);
encode_disp('AuPc',Data) -> 'enc_AuPc'(Data);
encode_disp('ViPc',Data) -> 'enc_ViPc'(Data);
encode_disp('ConfPc',Data) -> 'enc_ConfPc'(Data);
encode_disp('AuPr',Data) -> 'enc_AuPr'(Data);
encode_disp('ConfPr',Data) -> 'enc_ConfPr'(Data);
encode_disp('ViPr',Data) -> 'enc_ViPr'(Data);
encode_disp('IntraEvent',Data) -> 'enc_IntraEvent'(Data);
encode_disp('NtNetfail',Data) -> 'enc_NtNetfail'(Data);
encode_disp('NtQualityalert',Data) -> 'enc_NtQualityalert'(Data);
encode_disp('RtpPltrans',Data) -> 'enc_RtpPltrans'(Data);
encode_disp('AuOc',Data) -> 'enc_AuOc'(Data);
encode_disp('AuOcReturn',Data) -> 'enc_AuOcReturn'(Data);
encode_disp('PaReturnParam',Data) -> 'enc_PaReturnParam'(Data);
encode_disp('PcReturnParam',Data) -> 'enc_PcReturnParam'(Data);
encode_disp('PrReturnParam',Data) -> 'enc_PrReturnParam'(Data);
encode_disp('IntraAddReply',Data) -> 'enc_IntraAddReply'(Data);
encode_disp('IntraSubReply',Data) -> 'enc_IntraSubReply'(Data);
encode_disp('IntraModifyReply',Data) -> 'enc_IntraModifyReply'(Data);
encode_disp('IntraEventReply',Data) -> 'enc_IntraEventReply'(Data);
encode_disp('IntraStopReply',Data) -> 'enc_IntraStopReply'(Data);
encode_disp('IntraAddConfirm',Data) -> 'enc_IntraAddConfirm'(Data);
encode_disp('IntraBridge',Data) -> 'enc_IntraBridge'(Data);
encode_disp('IntraExitRoom',Data) -> 'enc_IntraExitRoom'(Data);
encode_disp('IntraNotification',Data) -> 'enc_IntraNotification'(Data);
encode_disp('TerminationStructList',Data) -> 'enc_TerminationStructList'(Data);
encode_disp('IntraBytes',Data) -> 'enc_IntraBytes'(Data);
encode_disp('IntraRtsp',Data) -> 'enc_IntraRtsp'(Data);
encode_disp('IntraRtspSetup',Data) -> 'enc_IntraRtspSetup'(Data);
encode_disp('IntraRtspPlay',Data) -> 'enc_IntraRtspPlay'(Data);
encode_disp('IntraRtspPause',Data) -> 'enc_IntraRtspPause'(Data);
encode_disp('IntraRtspRecord',Data) -> 'enc_IntraRtspRecord'(Data);
encode_disp('IntraRtspRange',Data) -> 'enc_IntraRtspRange'(Data);
encode_disp('IntraRtspOpt',Data) -> 'enc_IntraRtspOpt'(Data);
encode_disp('IntraRtspRep',Data) -> 'enc_IntraRtspRep'(Data);
encode_disp('IntraRtspDesRep',Data) -> 'enc_IntraRtspDesRep'(Data);
encode_disp('IntraOSD',Data) -> 'enc_IntraOSD'(Data);
encode_disp('IntraOSDRep',Data) -> 'enc_IntraOSDRep'(Data);
encode_disp('IntraOSDAdd',Data) -> 'enc_IntraOSDAdd'(Data);
encode_disp('IntraOSDDelete',Data) -> 'enc_IntraOSDDelete'(Data);
encode_disp('IntraOSDUpdate',Data) -> 'enc_IntraOSDUpdate'(Data);
encode_disp('IntraOSDHide',Data) -> 'enc_IntraOSDHide'(Data);
encode_disp('IntraOSDDisplay',Data) -> 'enc_IntraOSDDisplay'(Data);
encode_disp('OSDDirection',Data) -> 'enc_OSDDirection'(Data);
encode_disp('IntraOSDGroupList',Data) -> 'enc_IntraOSDGroupList'(Data);
encode_disp('IntraOSDGroup',Data) -> 'enc_IntraOSDGroup'(Data);
encode_disp('IntraOSDGroupAttr',Data) -> 'enc_IntraOSDGroupAttr'(Data);
encode_disp('IntraOSDWallPaper',Data) -> 'enc_IntraOSDWallPaper'(Data);
encode_disp('IntraOSDTextDescript',Data) -> 'enc_IntraOSDTextDescript'(Data);
encode_disp('IntraOSDImageDescript',Data) -> 'enc_IntraOSDImageDescript'(Data);
encode_disp('IntraTestAlive',Data) -> 'enc_IntraTestAlive'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('RcsRpsMessage',Data) -> 'dec_RcsRpsMessage'(Data);
decode_disp('TerminationStruct',Data) -> 'dec_TerminationStruct'(Data);
decode_disp('Cmd',Data) -> 'dec_Cmd'(Data);
decode_disp('IntraChannel',Data) -> 'dec_IntraChannel'(Data);
decode_disp('IntraChannelReply',Data) -> 'dec_IntraChannelReply'(Data);
decode_disp('ResInfo',Data) -> 'dec_ResInfo'(Data);
decode_disp('IntraAdd',Data) -> 'dec_IntraAdd'(Data);
decode_disp('IntraIP4AddrList',Data) -> 'dec_IntraIP4AddrList'(Data);
decode_disp('Statistics',Data) -> 'dec_Statistics'(Data);
decode_disp('IntraIP4Addr',Data) -> 'dec_IntraIP4Addr'(Data);
decode_disp('IntraModify',Data) -> 'dec_IntraModify'(Data);
decode_disp('IntraModifyConfereeAttr',Data) -> 'dec_IntraModifyConfereeAttr'(Data);
decode_disp('IntraConfPara',Data) -> 'dec_IntraConfPara'(Data);
decode_disp('VolumeControlCode',Data) -> 'dec_VolumeControlCode'(Data);
decode_disp('IntraConfReserve',Data) -> 'dec_IntraConfReserve'(Data);
decode_disp('IntraConfAudioMix',Data) -> 'dec_IntraConfAudioMix'(Data);
decode_disp('IntraConfGainAgc',Data) -> 'dec_IntraConfGainAgc'(Data);
decode_disp('IntraConfGain',Data) -> 'dec_IntraConfGain'(Data);
decode_disp('IntraConfVideoRoot',Data) -> 'dec_IntraConfVideoRoot'(Data);
decode_disp('IntraConfVideoLyt',Data) -> 'dec_IntraConfVideoLyt'(Data);
decode_disp('IntraConfVideoLytSel',Data) -> 'dec_IntraConfVideoLytSel'(Data);
decode_disp('IntraRegionList',Data) -> 'dec_IntraRegionList'(Data);
decode_disp('IntraRegion',Data) -> 'dec_IntraRegion'(Data);
decode_disp('IntraCreateRoom',Data) -> 'dec_IntraCreateRoom'(Data);
decode_disp('IntraConfStream',Data) -> 'dec_IntraConfStream'(Data);
decode_disp('IntraConfStreamExt',Data) -> 'dec_IntraConfStreamExt'(Data);
decode_disp('IntraConfStreamAudioExt',Data) -> 'dec_IntraConfStreamAudioExt'(Data);
decode_disp('IntraConfClamp',Data) -> 'dec_IntraConfClamp'(Data);
decode_disp('IntraConfStreamVideoExt',Data) -> 'dec_IntraConfStreamVideoExt'(Data);
decode_disp('IntraMove',Data) -> 'dec_IntraMove'(Data);
decode_disp('IntraDeleteRoom',Data) -> 'dec_IntraDeleteRoom'(Data);
decode_disp('IntraSignal',Data) -> 'dec_IntraSignal'(Data);
decode_disp('SignalValue',Data) -> 'dec_SignalValue'(Data);
decode_disp('SdPc',Data) -> 'dec_SdPc'(Data);
decode_disp('An',Data) -> 'dec_An'(Data);
decode_disp('AudioVideoFile',Data) -> 'dec_AudioVideoFile'(Data);
decode_disp('Vn',Data) -> 'dec_Vn'(Data);
decode_disp('TTS',Data) -> 'dec_TTS'(Data);
decode_disp('DateType',Data) -> 'dec_DateType'(Data);
decode_disp('DigitsType',Data) -> 'dec_DigitsType'(Data);
decode_disp('MoneyType',Data) -> 'dec_MoneyType'(Data);
decode_disp('NumberType',Data) -> 'dec_NumberType'(Data);
decode_disp('TimeType',Data) -> 'dec_TimeType'(Data);
decode_disp('VarType',Data) -> 'dec_VarType'(Data);
decode_disp('VAR',Data) -> 'dec_VAR'(Data);
decode_disp('FileStruct',Data) -> 'dec_FileStruct'(Data);
decode_disp('AudioVideo',Data) -> 'dec_AudioVideo'(Data);
decode_disp('VnTTS',Data) -> 'dec_VnTTS'(Data);
decode_disp('FileArry',Data) -> 'dec_FileArry'(Data);
decode_disp('AuPa',Data) -> 'dec_AuPa'(Data);
decode_disp('ViPa',Data) -> 'dec_ViPa'(Data);
decode_disp('Mix',Data) -> 'dec_Mix'(Data);
decode_disp('Volume',Data) -> 'dec_Volume'(Data);
decode_disp('ConfPa',Data) -> 'dec_ConfPa'(Data);
decode_disp('AuPc',Data) -> 'dec_AuPc'(Data);
decode_disp('ViPc',Data) -> 'dec_ViPc'(Data);
decode_disp('ConfPc',Data) -> 'dec_ConfPc'(Data);
decode_disp('AuPr',Data) -> 'dec_AuPr'(Data);
decode_disp('ConfPr',Data) -> 'dec_ConfPr'(Data);
decode_disp('ViPr',Data) -> 'dec_ViPr'(Data);
decode_disp('IntraEvent',Data) -> 'dec_IntraEvent'(Data);
decode_disp('NtNetfail',Data) -> 'dec_NtNetfail'(Data);
decode_disp('NtQualityalert',Data) -> 'dec_NtQualityalert'(Data);
decode_disp('RtpPltrans',Data) -> 'dec_RtpPltrans'(Data);
decode_disp('AuOc',Data) -> 'dec_AuOc'(Data);
decode_disp('AuOcReturn',Data) -> 'dec_AuOcReturn'(Data);
decode_disp('PaReturnParam',Data) -> 'dec_PaReturnParam'(Data);
decode_disp('PcReturnParam',Data) -> 'dec_PcReturnParam'(Data);
decode_disp('PrReturnParam',Data) -> 'dec_PrReturnParam'(Data);
decode_disp('IntraAddReply',Data) -> 'dec_IntraAddReply'(Data);
decode_disp('IntraSubReply',Data) -> 'dec_IntraSubReply'(Data);
decode_disp('IntraModifyReply',Data) -> 'dec_IntraModifyReply'(Data);
decode_disp('IntraEventReply',Data) -> 'dec_IntraEventReply'(Data);
decode_disp('IntraStopReply',Data) -> 'dec_IntraStopReply'(Data);
decode_disp('IntraAddConfirm',Data) -> 'dec_IntraAddConfirm'(Data);
decode_disp('IntraBridge',Data) -> 'dec_IntraBridge'(Data);
decode_disp('IntraExitRoom',Data) -> 'dec_IntraExitRoom'(Data);
decode_disp('IntraNotification',Data) -> 'dec_IntraNotification'(Data);
decode_disp('TerminationStructList',Data) -> 'dec_TerminationStructList'(Data);
decode_disp('IntraBytes',Data) -> 'dec_IntraBytes'(Data);
decode_disp('IntraRtsp',Data) -> 'dec_IntraRtsp'(Data);
decode_disp('IntraRtspSetup',Data) -> 'dec_IntraRtspSetup'(Data);
decode_disp('IntraRtspPlay',Data) -> 'dec_IntraRtspPlay'(Data);
decode_disp('IntraRtspPause',Data) -> 'dec_IntraRtspPause'(Data);
decode_disp('IntraRtspRecord',Data) -> 'dec_IntraRtspRecord'(Data);
decode_disp('IntraRtspRange',Data) -> 'dec_IntraRtspRange'(Data);
decode_disp('IntraRtspOpt',Data) -> 'dec_IntraRtspOpt'(Data);
decode_disp('IntraRtspRep',Data) -> 'dec_IntraRtspRep'(Data);
decode_disp('IntraRtspDesRep',Data) -> 'dec_IntraRtspDesRep'(Data);
decode_disp('IntraOSD',Data) -> 'dec_IntraOSD'(Data);
decode_disp('IntraOSDRep',Data) -> 'dec_IntraOSDRep'(Data);
decode_disp('IntraOSDAdd',Data) -> 'dec_IntraOSDAdd'(Data);
decode_disp('IntraOSDDelete',Data) -> 'dec_IntraOSDDelete'(Data);
decode_disp('IntraOSDUpdate',Data) -> 'dec_IntraOSDUpdate'(Data);
decode_disp('IntraOSDHide',Data) -> 'dec_IntraOSDHide'(Data);
decode_disp('IntraOSDDisplay',Data) -> 'dec_IntraOSDDisplay'(Data);
decode_disp('OSDDirection',Data) -> 'dec_OSDDirection'(Data);
decode_disp('IntraOSDGroupList',Data) -> 'dec_IntraOSDGroupList'(Data);
decode_disp('IntraOSDGroup',Data) -> 'dec_IntraOSDGroup'(Data);
decode_disp('IntraOSDGroupAttr',Data) -> 'dec_IntraOSDGroupAttr'(Data);
decode_disp('IntraOSDWallPaper',Data) -> 'dec_IntraOSDWallPaper'(Data);
decode_disp('IntraOSDTextDescript',Data) -> 'dec_IntraOSDTextDescript'(Data);
decode_disp('IntraOSDImageDescript',Data) -> 'dec_IntraOSDImageDescript'(Data);
decode_disp('IntraTestAlive',Data) -> 'dec_IntraTestAlive'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  RcsRpsMessage
%%================================
'enc_RcsRpsMessage'(Val) ->
    'enc_RcsRpsMessage'(Val, [<<48>>]).

'enc_RcsRpsMessage'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute transactionID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute contextID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute terminationID(3)   External RcsRpsMsg:TerminationStruct
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_TerminationStruct'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute endpointID(4)   External RcsRpsMsg:TerminationStruct
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_TerminationStruct'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute callID(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute command(6)   External RcsRpsMsg:Cmd
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_Cmd'(Cindex6, [<<165>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RcsRpsMessage'(Tlv) ->
   'dec_RcsRpsMessage'(Tlv, [16]).

'dec_RcsRpsMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute transactionID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute contextID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute terminationID(3)   External RcsRpsMsg:TerminationStruct
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_TerminationStruct'(V3, [131074]),

%%-------------------------------------------------
%% attribute endpointID(4)   External RcsRpsMsg:TerminationStruct
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_TerminationStruct'(V4, [131075]),

%%-------------------------------------------------
%% attribute callID(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5, [131076]),

%%-------------------------------------------------
%% attribute command(6)   External RcsRpsMsg:Cmd
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_Cmd'(V6, [131077]),

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'RcsRpsMessage', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  TerminationStruct
%%================================
'enc_TerminationStruct'(Val) ->
    'enc_TerminationStruct'(Val, [<<48>>]).

'enc_TerminationStruct'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute rpsNo(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute boardNo(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute channelNo(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TerminationStruct'(Tlv) ->
   'dec_TerminationStruct'(Tlv, [16]).

'dec_TerminationStruct'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rpsNo(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute boardNo(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute channelNo(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TerminationStruct', Term1, Term2, Term3}.



%%================================
%%  Cmd
%%================================
'enc_Cmd'(Val) ->
    'enc_Cmd'(Val, []).

'enc_Cmd'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      resinfo ->
         'enc_ResInfo'(element(2,Val), [<<160>>]);
      addReq ->
         'enc_IntraAdd'(element(2,Val), [<<161>>]);
      subtractReq ->
         encode_integer(element(2,Val), [<<130>>]);
      modifyReq ->
         'enc_IntraModify'(element(2,Val), [<<163>>]);
      creatroomReq ->
         'enc_IntraCreateRoom'(element(2,Val), [<<164>>]);
      delroomReq ->
         'enc_IntraDeleteRoom'(element(2,Val), [<<165>>]);
      moveReq ->
         'enc_IntraMove'(element(2,Val), [<<166>>]);
      eventReq ->
         'enc_IntraEvent'(element(2,Val), [<<167>>]);
      channelReq ->
         'enc_IntraChannel'(element(2,Val), [<<168>>]);
      signalReq ->
         'enc_IntraSignal'(element(2,Val), [<<169>>]);
      stopReq ->
         encode_integer(element(2,Val), [<<138>>]);
      addRep ->
         'enc_IntraAddReply'(element(2,Val), [<<171>>]);
      subtractRep ->
         'enc_IntraSubReply'(element(2,Val), [<<172>>]);
      modifyRep ->
         'enc_IntraModifyReply'(element(2,Val), [<<173>>]);
      modifyattr ->
         'enc_IntraModifyConfereeAttr'(element(2,Val), [<<174>>]);
      creatroomRep ->
         encode_integer(element(2,Val), [<<143>>]);
      delroomRep ->
         encode_integer(element(2,Val), [<<144>>]);
      moveRep ->
         encode_integer(element(2,Val), [<<145>>]);
      modattrRep ->
         encode_integer(element(2,Val), [<<146>>]);
      eventRep ->
         'enc_IntraEventReply'(element(2,Val), [<<179>>]);
      channelRep ->
         'enc_IntraChannelReply'(element(2,Val), [<<180>>]);
      stopRep ->
         'enc_IntraStopReply'(element(2,Val), [<<181>>]);
      addConfirm ->
         'enc_IntraAddConfirm'(element(2,Val), [<<182>>]);
      bridgeResourceReq ->
         'enc_IntraBridge'(element(2,Val), [<<183>>]);
      bridgeRep ->
         encode_integer(element(2,Val), [<<152>>]);
      exitroom ->
         'enc_IntraExitRoom'(element(2,Val), [<<185>>]);
      ttsReq ->
         'enc_TTS'(element(2,Val), [<<186>>]);
      ttsRep ->
         encode_integer(element(2,Val), [<<155>>]);
      notify ->
         'enc_IntraNotification'(element(2,Val), [<<188>>]);
      notifyRep ->
         encode_integer(element(2,Val), [<<157>>]);
      sendPackReq ->
         'enc_IntraBytes'(element(2,Val), [<<190>>]);
      sendPackRep ->
         encode_integer(element(2,Val), [<<159,31>>]);
      volumeadjust ->
         'enc_Volume'(element(2,Val), [<<191,32>>]);
      volumeadjustRep ->
         encode_integer(element(2,Val), [<<159,33>>]);
      rtspReq ->
         'enc_IntraRtsp'(element(2,Val), [<<191,34>>]);
      rtspRep ->
         'enc_IntraRtspRep'(element(2,Val), [<<191,35>>]);
      osdReq ->
         'enc_IntraOSD'(element(2,Val), [<<191,36>>]);
      osdRep ->
         'enc_IntraOSDRep'(element(2,Val), [<<191,37>>]);
      testAlive ->
         'enc_IntraTestAlive'(element(2,Val), [<<191,38>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Cmd'(Tlv) ->
   'dec_Cmd'(Tlv, []).

'dec_Cmd'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'resinfo'
    {131072, V1} -> 
        {resinfo, 'dec_ResInfo'(V1, [])};


%% 'addReq'
    {131073, V1} -> 
        {addReq, 'dec_IntraAdd'(V1, [])};


%% 'subtractReq'
    {131074, V1} -> 
        {subtractReq, decode_integer(V1, [])};


%% 'modifyReq'
    {131075, V1} -> 
        {modifyReq, 'dec_IntraModify'(V1, [])};


%% 'creatroomReq'
    {131076, V1} -> 
        {creatroomReq, 'dec_IntraCreateRoom'(V1, [])};


%% 'delroomReq'
    {131077, V1} -> 
        {delroomReq, 'dec_IntraDeleteRoom'(V1, [])};


%% 'moveReq'
    {131078, V1} -> 
        {moveReq, 'dec_IntraMove'(V1, [])};


%% 'eventReq'
    {131079, V1} -> 
        {eventReq, 'dec_IntraEvent'(V1, [])};


%% 'channelReq'
    {131080, V1} -> 
        {channelReq, 'dec_IntraChannel'(V1, [])};


%% 'signalReq'
    {131081, V1} -> 
        {signalReq, 'dec_IntraSignal'(V1, [])};


%% 'stopReq'
    {131082, V1} -> 
        {stopReq, decode_integer(V1, [])};


%% 'addRep'
    {131083, V1} -> 
        {addRep, 'dec_IntraAddReply'(V1, [])};


%% 'subtractRep'
    {131084, V1} -> 
        {subtractRep, 'dec_IntraSubReply'(V1, [])};


%% 'modifyRep'
    {131085, V1} -> 
        {modifyRep, 'dec_IntraModifyReply'(V1, [])};


%% 'modifyattr'
    {131086, V1} -> 
        {modifyattr, 'dec_IntraModifyConfereeAttr'(V1, [])};


%% 'creatroomRep'
    {131087, V1} -> 
        {creatroomRep, decode_integer(V1, [])};


%% 'delroomRep'
    {131088, V1} -> 
        {delroomRep, decode_integer(V1, [])};


%% 'moveRep'
    {131089, V1} -> 
        {moveRep, decode_integer(V1, [])};


%% 'modattrRep'
    {131090, V1} -> 
        {modattrRep, decode_integer(V1, [])};


%% 'eventRep'
    {131091, V1} -> 
        {eventRep, 'dec_IntraEventReply'(V1, [])};


%% 'channelRep'
    {131092, V1} -> 
        {channelRep, 'dec_IntraChannelReply'(V1, [])};


%% 'stopRep'
    {131093, V1} -> 
        {stopRep, 'dec_IntraStopReply'(V1, [])};


%% 'addConfirm'
    {131094, V1} -> 
        {addConfirm, 'dec_IntraAddConfirm'(V1, [])};


%% 'bridgeResourceReq'
    {131095, V1} -> 
        {bridgeResourceReq, 'dec_IntraBridge'(V1, [])};


%% 'bridgeRep'
    {131096, V1} -> 
        {bridgeRep, decode_integer(V1, [])};


%% 'exitroom'
    {131097, V1} -> 
        {exitroom, 'dec_IntraExitRoom'(V1, [])};


%% 'ttsReq'
    {131098, V1} -> 
        {ttsReq, 'dec_TTS'(V1, [])};


%% 'ttsRep'
    {131099, V1} -> 
        {ttsRep, decode_integer(V1, [])};


%% 'notify'
    {131100, V1} -> 
        {notify, 'dec_IntraNotification'(V1, [])};


%% 'notifyRep'
    {131101, V1} -> 
        {notifyRep, decode_integer(V1, [])};


%% 'sendPackReq'
    {131102, V1} -> 
        {sendPackReq, 'dec_IntraBytes'(V1, [])};


%% 'sendPackRep'
    {131103, V1} -> 
        {sendPackRep, decode_integer(V1, [])};


%% 'volumeadjust'
    {131104, V1} -> 
        {volumeadjust, 'dec_Volume'(V1, [])};


%% 'volumeadjustRep'
    {131105, V1} -> 
        {volumeadjustRep, decode_integer(V1, [])};


%% 'rtspReq'
    {131106, V1} -> 
        {rtspReq, 'dec_IntraRtsp'(V1, [])};


%% 'rtspRep'
    {131107, V1} -> 
        {rtspRep, 'dec_IntraRtspRep'(V1, [])};


%% 'osdReq'
    {131108, V1} -> 
        {osdReq, 'dec_IntraOSD'(V1, [])};


%% 'osdRep'
    {131109, V1} -> 
        {osdRep, 'dec_IntraOSDRep'(V1, [])};


%% 'testAlive'
    {131110, V1} -> 
        {testAlive, 'dec_IntraTestAlive'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraChannel
%%================================
'enc_IntraChannel'(Val) ->
    'enc_IntraChannel'(Val, [<<48>>]).

'enc_IntraChannel'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute channelid(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute channelswitch(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraChannel'(Tlv) ->
   'dec_IntraChannel'(Tlv, [16]).

'dec_IntraChannel'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute channelid(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute channelswitch(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraChannel', Term1, Term2}.



%%================================
%%  IntraChannelReply
%%================================
'enc_IntraChannelReply'(Val) ->
    'enc_IntraChannelReply'(Val, [<<48>>]).

'enc_IntraChannelReply'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute channelid(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute channelswitch(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraChannelReply'(Tlv) ->
   'dec_IntraChannelReply'(Tlv, [16]).

'dec_IntraChannelReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute channelid(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute channelswitch(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraChannelReply', Term1, Term2}.



%%================================
%%  ResInfo
%%================================
'enc_ResInfo'(Val) ->
    'enc_ResInfo'(Val, [<<48>>]).

'enc_ResInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute totalRes(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute usingRes(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute badUseNo(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute totalConf(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute usingConf(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute identifyID(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<133>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ResInfo'(Tlv) ->
   'dec_ResInfo'(Tlv, [16]).

'dec_ResInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute totalRes(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute usingRes(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute badUseNo(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3, [131074]),

%%-------------------------------------------------
%% attribute totalConf(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4, [131075]),

%%-------------------------------------------------
%% attribute usingConf(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5, [131076]),

%%-------------------------------------------------
%% attribute identifyID(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_integer(V6, [131077]),

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'ResInfo', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  IntraAdd
%%================================
'enc_IntraAdd'(Val) ->
    'enc_IntraAdd'(Val, [<<48>>]).

'enc_IntraAdd'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute remoteSDP(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute ntJt(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute statistics(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_named_bit_string(Cindex3, [{ntDur,0},{ntOs,1},{ntOr,3},{rtpPs,4},{rtpPr,5},{rtpPl,6},{rtpJit,7},{rtpDelay,8}], [<<130>>])
       end,

%%-------------------------------------------------
%% attribute roomID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute cic(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute bear(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute remoteAddr(7)   External RcsRpsMsg:IntraIP4AddrList OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraIP4AddrList'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute mediafileAddr(8) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraAdd'(Tlv) ->
   'dec_IntraAdd'(Tlv, [16]).

'dec_IntraAdd'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute remoteSDP(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ntJt(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute statistics(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_named_bit_string(V3, [{ntDur,0},{ntOs,1},{ntOr,3},{rtpPs,4},{rtpPr,5},{rtpPl,6},{rtpJit,7},{rtpDelay,8}], []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute roomID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute cic(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute bear(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute remoteAddr(7)   External RcsRpsMsg:IntraIP4AddrList OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_IntraIP4AddrList'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute mediafileAddr(8) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
binary_to_list(decode_restricted_string(V8, []))
end
, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'IntraAdd', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  IntraIP4AddrList
%%================================
'enc_IntraIP4AddrList'(Val) ->
    'enc_IntraIP4AddrList'(Val, [<<48>>]).

'enc_IntraIP4AddrList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IntraIP4AddrList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_IntraIP4AddrList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IntraIP4AddrList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_IntraIP4Addr'(H, [<<48>>]),
   'enc_IntraIP4AddrList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IntraIP4AddrList'(Tlv) ->
   'dec_IntraIP4AddrList'(Tlv, [16]).

'dec_IntraIP4AddrList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_IntraIP4Addr'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  Statistics
%%================================
'enc_Statistics'(Val) ->
    'enc_Statistics'(Val, [<<3>>]).

'enc_Statistics'(Val, TagIn) ->
encode_named_bit_string(Val, [{ntDur,0},{ntOs,1},{ntOr,3},{rtpPs,4},{rtpPr,5},{rtpPl,6},{rtpJit,7},{rtpDelay,8}], TagIn).


'dec_Statistics'(Tlv) ->
   'dec_Statistics'(Tlv, [3]).

'dec_Statistics'(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{ntDur,0},{ntOs,1},{ntOr,3},{rtpPs,4},{rtpPr,5},{rtpPl,6},{rtpJit,7},{rtpDelay,8}], TagIn).



%%================================
%%  IntraIP4Addr
%%================================
'enc_IntraIP4Addr'(Val) ->
    'enc_IntraIP4Addr'(Val, [<<48>>]).

'enc_IntraIP4Addr'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute type(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ip(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute port(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraIP4Addr'(Tlv) ->
   'dec_IntraIP4Addr'(Tlv, [16]).

'dec_IntraIP4Addr'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute type(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute ip(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

%%-------------------------------------------------
%% attribute port(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraIP4Addr', Term1, Term2, Term3}.



%%================================
%%  IntraModify
%%================================
'enc_IntraModify'(Val) ->
    'enc_IntraModify'(Val, [<<48>>]).

'enc_IntraModify'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute remoteSDP(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute timerlength(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraModify'(Tlv) ->
   'dec_IntraModify'(Tlv, [16]).

'dec_IntraModify'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute remoteSDP(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute timerlength(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraModify', Term1, Term2}.



%%================================
%%  IntraModifyConfereeAttr
%%================================
'enc_IntraModifyConfereeAttr'(Val) ->
    'enc_IntraModifyConfereeAttr'(Val, [<<48>>]).

'enc_IntraModifyConfereeAttr'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute attribute(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute activeTalker(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute type(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute minSize(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute dualvideo(6) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute reserve(7)   External RcsRpsMsg:IntraConfReserve OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfReserve'(Cindex7, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute audiomix(8)   External RcsRpsMsg:IntraConfAudioMix OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfAudioMix'(Cindex8, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute videolayout(9)   External RcsRpsMsg:IntraConfVideoLyt OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfVideoLyt'(Cindex9, [<<170>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraModifyConfereeAttr'(Tlv) ->
   'dec_IntraModifyConfereeAttr'(Tlv, [16]).

'dec_IntraModifyConfereeAttr'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute attribute(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute activeTalker(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_boolean(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute type(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute minSize(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute dualvideo(6) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_boolean(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute reserve(7)   External RcsRpsMsg:IntraConfReserve OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131080,V7}|TempTlv8] ->
    {'dec_IntraConfReserve'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute audiomix(8)   External RcsRpsMsg:IntraConfAudioMix OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131081,V8}|TempTlv9] ->
    {'dec_IntraConfAudioMix'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute videolayout(9)   External RcsRpsMsg:IntraConfVideoLyt OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131082,V9}|TempTlv10] ->
    {'dec_IntraConfVideoLyt'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'IntraModifyConfereeAttr', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  IntraConfPara
%%================================
'enc_IntraConfPara'(Val) ->
    'enc_IntraConfPara'(Val, [<<48>>]).

'enc_IntraConfPara'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13} = Val,

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute sumNum(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute roomSize(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute deleteWhen(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute term(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute volumeControl(6)   External RcsRpsMsg:VolumeControlCode OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_VolumeControlCode'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute toneClamping(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute confMode(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute dualvideo(9) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute reserve(10)   External RcsRpsMsg:IntraConfReserve OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfReserve'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute audiomix(11)   External RcsRpsMsg:IntraConfAudioMix OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfAudioMix'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute videolayout(12)   External RcsRpsMsg:IntraConfVideoLyt OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfVideoLyt'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute minSize(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfPara'(Tlv) ->
   'dec_IntraConfPara'(Tlv, [16]).

'dec_IntraConfPara'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute sumNum(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute roomSize(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute deleteWhen(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute term(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute volumeControl(6)   External RcsRpsMsg:VolumeControlCode OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_VolumeControlCode'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute toneClamping(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute confMode(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_integer(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute dualvideo(9) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_boolean(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute reserve(10)   External RcsRpsMsg:IntraConfReserve OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_IntraConfReserve'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute audiomix(11)   External RcsRpsMsg:IntraConfAudioMix OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'dec_IntraConfAudioMix'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute videolayout(12)   External RcsRpsMsg:IntraConfVideoLyt OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'dec_IntraConfVideoLyt'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute minSize(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

case Tlv14 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv14}}}) % extra fields not allowed
end,
   {'IntraConfPara', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}.



%%================================
%%  VolumeControlCode
%%================================
'enc_VolumeControlCode'(Val) ->
    'enc_VolumeControlCode'(Val, [<<48>>]).

'enc_VolumeControlCode'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute up(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute down(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute reset(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_VolumeControlCode'(Tlv) ->
   'dec_VolumeControlCode'(Tlv, [16]).

'dec_VolumeControlCode'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute up(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute down(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute reset(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'VolumeControlCode', Term1, Term2, Term3}.



%%================================
%%  IntraConfReserve
%%================================
'enc_IntraConfReserve'(Val) ->
    'enc_IntraConfReserve'(Val, [<<48>>]).

'enc_IntraConfReserve'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute required(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute number(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute type(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute start(4) with type VisibleString
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_restricted_string(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute dur(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfReserve'(Tlv) ->
   'dec_IntraConfReserve'(Tlv, [16]).

'dec_IntraConfReserve'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute required(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute number(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute type(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute start(4) with type VisibleString
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
binary_to_list(decode_restricted_string(V4, [131075]))
end
,

%%-------------------------------------------------
%% attribute dur(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'IntraConfReserve', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  IntraConfAudioMix
%%================================
'enc_IntraConfAudioMix'(Val) ->
    'enc_IntraConfAudioMix'(Val, [<<48>>]).

'enc_IntraConfAudioMix'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute id(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute samplerate(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute nloudest(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute asnri(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute asnth(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute gain(6)   External RcsRpsMsg:IntraConfGain OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfGain'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfAudioMix'(Tlv) ->
   'dec_IntraConfAudioMix'(Tlv, [16]).

'dec_IntraConfAudioMix'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute samplerate(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute nloudest(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute asnri(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute asnth(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute gain(6)   External RcsRpsMsg:IntraConfGain OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_IntraConfGain'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'IntraConfAudioMix', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  IntraConfGainAgc
%%================================
'enc_IntraConfGainAgc'(Val) ->
    'enc_IntraConfGainAgc'(Val, [<<48>>]).

'enc_IntraConfGainAgc'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tgtlvl(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute maxgain(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfGainAgc'(Tlv) ->
   'dec_IntraConfGainAgc'(Tlv, [16]).

'dec_IntraConfGainAgc'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tgtlvl(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute maxgain(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraConfGainAgc', Term1, Term2}.



%%================================
%%  IntraConfGain
%%================================
'enc_IntraConfGain'(Val) ->
    'enc_IntraConfGain'(Val, [<<48>>]).

'enc_IntraConfGain'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute id(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute amt(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute agc(3)   External RcsRpsMsg:IntraConfGainAgc OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfGainAgc'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfGain'(Tlv) ->
   'dec_IntraConfGain'(Tlv, [16]).

'dec_IntraConfGain'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute amt(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute agc(3)   External RcsRpsMsg:IntraConfGainAgc OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_IntraConfGainAgc'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraConfGain', Term1, Term2, Term3}.



%%================================
%%  IntraConfVideoRoot
%%================================
'enc_IntraConfVideoRoot'(Val) ->
    'enc_IntraConfVideoRoot'(Val, [<<48>>]).

'enc_IntraConfVideoRoot'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute size(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute bgcolor(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute bgimage(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfVideoRoot'(Tlv) ->
   'dec_IntraConfVideoRoot'(Tlv, [16]).

'dec_IntraConfVideoRoot'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute size(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute bgcolor(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute bgimage(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraConfVideoRoot', Term1, Term2, Term3}.



%%================================
%%  IntraConfVideoLyt
%%================================
'enc_IntraConfVideoLyt'(Val) ->
    'enc_IntraConfVideoLyt'(Val, [<<48>>]).

'enc_IntraConfVideoLyt'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute id(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute type(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute root(3)   External RcsRpsMsg:IntraConfVideoRoot
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_IntraConfVideoRoot'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute selector(4)   External RcsRpsMsg:IntraConfVideoLytSel OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfVideoLytSel'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute otherregion(5)   External RcsRpsMsg:IntraRegionList OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraRegionList'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfVideoLyt'(Tlv) ->
   'dec_IntraConfVideoLyt'(Tlv, [16]).

'dec_IntraConfVideoLyt'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute type(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute root(3)   External RcsRpsMsg:IntraConfVideoRoot
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_IntraConfVideoRoot'(V3, [131074]),

%%-------------------------------------------------
%% attribute selector(4)   External RcsRpsMsg:IntraConfVideoLytSel OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_IntraConfVideoLytSel'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute otherregion(5)   External RcsRpsMsg:IntraRegionList OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_IntraRegionList'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'IntraConfVideoLyt', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  IntraConfVideoLytSel
%%================================
'enc_IntraConfVideoLytSel'(Val) ->
    'enc_IntraConfVideoLytSel'(Val, [<<48>>]).

'enc_IntraConfVideoLytSel'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute id(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute method(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute status(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute blankothers(4) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute switchinterval(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute speakerview(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute region(7)   External RcsRpsMsg:IntraRegionList OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraRegionList'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute root(8)   External RcsRpsMsg:IntraConfVideoRoot OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfVideoRoot'(Cindex8, [<<167>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfVideoLytSel'(Tlv) ->
   'dec_IntraConfVideoLytSel'(Tlv, [16]).

'dec_IntraConfVideoLytSel'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute method(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute status(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute blankothers(4) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_boolean(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute switchinterval(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute speakerview(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute region(7)   External RcsRpsMsg:IntraRegionList OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_IntraRegionList'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute root(8)   External RcsRpsMsg:IntraConfVideoRoot OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_IntraConfVideoRoot'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'IntraConfVideoLytSel', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  IntraRegionList
%%================================
'enc_IntraRegionList'(Val) ->
    'enc_IntraRegionList'(Val, [<<48>>]).

'enc_IntraRegionList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IntraRegionList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_IntraRegionList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IntraRegionList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_IntraRegion'(H, [<<48>>]),
   'enc_IntraRegionList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IntraRegionList'(Tlv) ->
   'dec_IntraRegionList'(Tlv, [16]).

'dec_IntraRegionList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_IntraRegion'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  IntraRegion
%%================================
'enc_IntraRegion'(Val) ->
    'enc_IntraRegion'(Val, [<<48>>]).

'enc_IntraRegion'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12} = Val,

%%-------------------------------------------------
%% attribute id(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute left(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute top(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute relativesize(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute priority(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute title(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute logo(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute freeze(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute titletextcolor(9) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute titlebackgroundcolor(10) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute bordercolor(11) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute borderwidth(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraRegion'(Tlv) ->
   'dec_IntraRegion'(Tlv, [16]).

'dec_IntraRegion'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute left(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute top(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute relativesize(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
binary_to_list(decode_restricted_string(V4, []))
end
, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute priority(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
binary_to_list(decode_restricted_string(V5, []))
end
, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute title(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
binary_to_list(decode_restricted_string(V6, []))
end
, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute logo(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
binary_to_list(decode_restricted_string(V7, []))
end
, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute freeze(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_boolean(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute titletextcolor(9) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
binary_to_list(decode_restricted_string(V9, []))
end
, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute titlebackgroundcolor(10) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
binary_to_list(decode_restricted_string(V10, []))
end
, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute bordercolor(11) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
binary_to_list(decode_restricted_string(V11, []))
end
, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute borderwidth(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

case Tlv13 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv13}}}) % extra fields not allowed
end,
   {'IntraRegion', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12}.



%%================================
%%  IntraCreateRoom
%%================================
'enc_IntraCreateRoom'(Val) ->
    'enc_IntraCreateRoom'(Val, []).

'enc_IntraCreateRoom'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      audioConf ->
         'enc_IntraConfPara'(element(2,Val), [<<160>>]);
      videoConf ->
         'enc_IntraConfPara'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraCreateRoom'(Tlv) ->
   'dec_IntraCreateRoom'(Tlv, []).

'dec_IntraCreateRoom'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'audioConf'
    {131072, V1} -> 
        {audioConf, 'dec_IntraConfPara'(V1, [])};


%% 'videoConf'
    {131073, V1} -> 
        {videoConf, 'dec_IntraConfPara'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraConfStream
%%================================
'enc_IntraConfStream'(Val) ->
    'enc_IntraConfStream'(Val, [<<48>>]).

'enc_IntraConfStream'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute dir(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute fromcompressed(2) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute tocompressed(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute fromext(4)   External RcsRpsMsg:IntraConfStreamExt OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfStreamExt'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute toext(5)   External RcsRpsMsg:IntraConfStreamExt OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfStreamExt'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfStream'(Tlv) ->
   'dec_IntraConfStream'(Tlv, [16]).

'dec_IntraConfStream'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dir(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_integer(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute fromcompressed(2) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_boolean(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute tocompressed(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_boolean(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute fromext(4)   External RcsRpsMsg:IntraConfStreamExt OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_IntraConfStreamExt'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute toext(5)   External RcsRpsMsg:IntraConfStreamExt OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_IntraConfStreamExt'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'IntraConfStream', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  IntraConfStreamExt
%%================================
'enc_IntraConfStreamExt'(Val) ->
    'enc_IntraConfStreamExt'(Val, []).

'enc_IntraConfStreamExt'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      audioext ->
         'enc_IntraConfStreamAudioExt'(element(2,Val), [<<160>>]);
      videoext ->
         'enc_IntraConfStreamVideoExt'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraConfStreamExt'(Tlv) ->
   'dec_IntraConfStreamExt'(Tlv, []).

'dec_IntraConfStreamExt'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'audioext'
    {131072, V1} -> 
        {audioext, 'dec_IntraConfStreamAudioExt'(V1, [])};


%% 'videoext'
    {131073, V1} -> 
        {videoext, 'dec_IntraConfStreamVideoExt'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraConfStreamAudioExt
%%================================
'enc_IntraConfStreamAudioExt'(Val) ->
    'enc_IntraConfStreamAudioExt'(Val, [<<48>>]).

'enc_IntraConfStreamAudioExt'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute preferred(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute gain(2)   External RcsRpsMsg:IntraConfGain OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfGain'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute clamp(3)   External RcsRpsMsg:IntraConfClamp OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfClamp'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfStreamAudioExt'(Tlv) ->
   'dec_IntraConfStreamAudioExt'(Tlv, [16]).

'dec_IntraConfStreamAudioExt'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute preferred(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute gain(2)   External RcsRpsMsg:IntraConfGain OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_IntraConfGain'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute clamp(3)   External RcsRpsMsg:IntraConfClamp OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_IntraConfClamp'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraConfStreamAudioExt', Term1, Term2, Term3}.



%%================================
%%  IntraConfClamp
%%================================
'enc_IntraConfClamp'(Val) ->
    'enc_IntraConfClamp'(Val, [<<48>>]).

'enc_IntraConfClamp'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute dtmf(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute tone(2) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfClamp'(Tlv) ->
   'dec_IntraConfClamp'(Tlv, [16]).

'dec_IntraConfClamp'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dtmf(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute tone(2) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_boolean(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraConfClamp', Term1, Term2}.



%%================================
%%  IntraConfStreamVideoExt
%%================================
'enc_IntraConfStreamVideoExt'(Val) ->
    'enc_IntraConfStreamVideoExt'(Val, [<<48>>]).

'enc_IntraConfStreamVideoExt'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute override(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraConfStreamVideoExt'(Tlv) ->
   'dec_IntraConfStreamVideoExt'(Tlv, [16]).

'dec_IntraConfStreamVideoExt'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute override(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'IntraConfStreamVideoExt', Term1}.



%%================================
%%  IntraMove
%%================================
'enc_IntraMove'(Val) ->
    'enc_IntraMove'(Val, [<<48>>]).

'enc_IntraMove'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute sourceRoomID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute destRoomID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute attribute(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute echoCancle(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute tariffTone(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute administrator(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute activeTalker(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute audiostream(8)   External RcsRpsMsg:IntraConfStream OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfStream'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute videostream(9)   External RcsRpsMsg:IntraConfStream OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraConfStream'(Cindex9, [<<168>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraMove'(Tlv) ->
   'dec_IntraMove'(Tlv, [16]).

'dec_IntraMove'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sourceRoomID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute destRoomID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute attribute(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute echoCancle(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute tariffTone(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute administrator(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute activeTalker(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute audiostream(8)   External RcsRpsMsg:IntraConfStream OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_IntraConfStream'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute videostream(9)   External RcsRpsMsg:IntraConfStream OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_IntraConfStream'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'IntraMove', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  IntraDeleteRoom
%%================================
'enc_IntraDeleteRoom'(Val) ->
    'enc_IntraDeleteRoom'(Val, [<<48>>]).

'enc_IntraDeleteRoom'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute auId(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute viId(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraDeleteRoom'(Tlv) ->
   'dec_IntraDeleteRoom'(Tlv, [16]).

'dec_IntraDeleteRoom'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute auId(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute viId(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraDeleteRoom', Term1, Term2, Term3}.



%%================================
%%  IntraSignal
%%================================
'enc_IntraSignal'(Val) ->
    'enc_IntraSignal'(Val, [<<48>>]).

'enc_IntraSignal'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute signal(1)   External RcsRpsMsg:SignalValue
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SignalValue'(Cindex1, []),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraSignal'(Tlv) ->
   'dec_IntraSignal'(Tlv, [16]).

'dec_IntraSignal'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute signal(1)   External RcsRpsMsg:SignalValue
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SignalValue'(V1, []),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'IntraSignal', Term1}.



%%================================
%%  SignalValue
%%================================
'enc_SignalValue'(Val) ->
    'enc_SignalValue'(Val, []).

'enc_SignalValue'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      confPa ->
         'enc_ConfPa'(element(2,Val), [<<160>>]);
      confPc ->
         'enc_ConfPc'(element(2,Val), [<<161>>]);
      confPr ->
         'enc_ConfPr'(element(2,Val), [<<162>>]);
      auPa ->
         'enc_AuPa'(element(2,Val), [<<163>>]);
      auPc ->
         'enc_AuPc'(element(2,Val), [<<164>>]);
      auPr ->
         'enc_AuPr'(element(2,Val), [<<165>>]);
      viPa ->
         'enc_ViPa'(element(2,Val), [<<166>>]);
      viPc ->
         'enc_ViPc'(element(2,Val), [<<167>>]);
      viPr ->
         'enc_ViPr'(element(2,Val), [<<168>>]);
      sdPc ->
         'enc_SdPc'(element(2,Val), [<<169>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_SignalValue'(Tlv) ->
   'dec_SignalValue'(Tlv, []).

'dec_SignalValue'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'confPa'
    {131072, V1} -> 
        {confPa, 'dec_ConfPa'(V1, [])};


%% 'confPc'
    {131073, V1} -> 
        {confPc, 'dec_ConfPc'(V1, [])};


%% 'confPr'
    {131074, V1} -> 
        {confPr, 'dec_ConfPr'(V1, [])};


%% 'auPa'
    {131075, V1} -> 
        {auPa, 'dec_AuPa'(V1, [])};


%% 'auPc'
    {131076, V1} -> 
        {auPc, 'dec_AuPc'(V1, [])};


%% 'auPr'
    {131077, V1} -> 
        {auPr, 'dec_AuPr'(V1, [])};


%% 'viPa'
    {131078, V1} -> 
        {viPa, 'dec_ViPa'(V1, [])};


%% 'viPc'
    {131079, V1} -> 
        {viPc, 'dec_ViPc'(V1, [])};


%% 'viPr'
    {131080, V1} -> 
        {viPr, 'dec_ViPr'(V1, [])};


%% 'sdPc'
    {131081, V1} -> 
        {sdPc, 'dec_SdPc'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  SdPc
%%================================
'enc_SdPc'(Val) ->
    'enc_SdPc'(Val, [<<48>>]).

'enc_SdPc'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute type(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute buffer(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SdPc'(Tlv) ->
   'dec_SdPc'(Tlv, [16]).

'dec_SdPc'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute type(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute buffer(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SdPc', Term1, Term2}.



%%================================
%%  An
%%================================
'enc_An'(Val) ->
    'enc_An'(Val, [<<48>>]).

'enc_An'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute file1(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute file2(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute file3(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute file4(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute file5(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute file6(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute file7(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute file8(8) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute file9(9) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute file10(10) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_An'(Tlv) ->
   'dec_An'(Tlv, [16]).

'dec_An'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute file1(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute file2(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute file3(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute file4(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
binary_to_list(decode_restricted_string(V4, []))
end
, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute file5(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
binary_to_list(decode_restricted_string(V5, []))
end
, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute file6(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
binary_to_list(decode_restricted_string(V6, []))
end
, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute file7(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
binary_to_list(decode_restricted_string(V7, []))
end
, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute file8(8) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
binary_to_list(decode_restricted_string(V8, []))
end
, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute file9(9) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
binary_to_list(decode_restricted_string(V9, []))
end
, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute file10(10) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
binary_to_list(decode_restricted_string(V10, []))
end
, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'An', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  AudioVideoFile
%%================================
'enc_AudioVideoFile'(Val) ->
    'enc_AudioVideoFile'(Val, [<<48>>]).

'enc_AudioVideoFile'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute audiofile(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute videofile(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute audiofmt(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute videofmt(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AudioVideoFile'(Tlv) ->
   'dec_AudioVideoFile'(Tlv, [16]).

'dec_AudioVideoFile'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute audiofile(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute videofile(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute audiofmt(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute videofmt(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
binary_to_list(decode_restricted_string(V4, []))
end
, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'AudioVideoFile', Term1, Term2, Term3, Term4}.



%%================================
%%  Vn
%%================================
'enc_Vn'(Val) ->
    'enc_Vn'(Val, [<<48>>]).

'enc_Vn'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute file1(1)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute file2(2)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute file3(3)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute file4(4)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute file5(5)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute file6(6)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute file7(7)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute file8(8)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute file9(9)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute file10(10)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideoFile'(Cindex10, [<<169>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Vn'(Tlv) ->
   'dec_Vn'(Tlv, [16]).

'dec_Vn'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute file1(1)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_AudioVideoFile'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute file2(2)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_AudioVideoFile'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute file3(3)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_AudioVideoFile'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute file4(4)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_AudioVideoFile'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute file5(5)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_AudioVideoFile'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute file6(6)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_AudioVideoFile'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute file7(7)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_AudioVideoFile'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute file8(8)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_AudioVideoFile'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute file9(9)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_AudioVideoFile'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute file10(10)   External RcsRpsMsg:AudioVideoFile OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_AudioVideoFile'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'Vn', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  TTS
%%================================
'enc_TTS'(Val) ->
    'enc_TTS'(Val, [<<48>>]).

'enc_TTS'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute fileName(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute text(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute voiceSourceID(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute speed(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute volume(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute style(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute bgSound(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute lang(8) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TTS'(Tlv) ->
   'dec_TTS'(Tlv, [16]).

'dec_TTS'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute fileName(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute text(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

%%-------------------------------------------------
%% attribute voiceSourceID(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute speed(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute volume(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute style(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute bgSound(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_integer(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute lang(8) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
binary_to_list(decode_restricted_string(V8, []))
end
, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'TTS', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  DateType
%%================================
'enc_DateType'(Val) ->
    'enc_DateType'(Val, [<<10>>]).

'enc_DateType'(Val, TagIn) ->
case Val of
mdy -> encode_tags(TagIn, [0], 1);
ymd -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_DateType'(Tlv) ->
   'dec_DateType'(Tlv, [10]).

'dec_DateType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> mdy;
1 -> ymd;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  DigitsType
%%================================
'enc_DigitsType'(Val) ->
    'enc_DigitsType'(Val, [<<10>>]).

'enc_DigitsType'(Val, TagIn) ->
case Val of
gen -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_DigitsType'(Tlv) ->
   'dec_DigitsType'(Tlv, [10]).

'dec_DigitsType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> gen;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  MoneyType
%%================================
'enc_MoneyType'(Val) ->
    'enc_MoneyType'(Val, [<<10>>]).

'enc_MoneyType'(Val, TagIn) ->
case Val of
cny -> encode_tags(TagIn, [0], 1);
eur -> encode_tags(TagIn, [1], 1);
usd -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_MoneyType'(Tlv) ->
   'dec_MoneyType'(Tlv, [10]).

'dec_MoneyType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> cny;
1 -> eur;
2 -> usd;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  NumberType
%%================================
'enc_NumberType'(Val) ->
    'enc_NumberType'(Val, [<<10>>]).

'enc_NumberType'(Val, TagIn) ->
case Val of
crd -> encode_tags(TagIn, [0], 1);
ord -> encode_tags(TagIn, [1], 1);
cardinals -> encode_tags(TagIn, [2], 1);
ordinals -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_NumberType'(Tlv) ->
   'dec_NumberType'(Tlv, [10]).

'dec_NumberType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> crd;
1 -> ord;
2 -> cardinals;
3 -> ordinals;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  TimeType
%%================================
'enc_TimeType'(Val) ->
    'enc_TimeType'(Val, [<<10>>]).

'enc_TimeType'(Val, TagIn) ->
case Val of
t12 -> encode_tags(TagIn, [0], 1);
t24 -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TimeType'(Tlv) ->
   'dec_TimeType'(Tlv, [10]).

'dec_TimeType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> t12;
1 -> t24;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  VarType
%%================================
'enc_VarType'(Val) ->
    'enc_VarType'(Val, []).

'enc_VarType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      date ->
         case element(2,Val) of
mdy -> encode_tags([<<128>>], [0], 1);
ymd -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      digits ->
         case element(2,Val) of
gen -> encode_tags([<<129>>], [0], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end;
      duration ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      month ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      money ->
         case element(2,Val) of
cny -> encode_tags([<<132>>], [0], 1);
eur -> encode_tags([<<132>>], [1], 1);
usd -> encode_tags([<<132>>], [2], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end;
      number ->
         case element(2,Val) of
crd -> encode_tags([<<133>>], [0], 1);
ord -> encode_tags([<<133>>], [1], 1);
cardinals -> encode_tags([<<133>>], [2], 1);
ordinals -> encode_tags([<<133>>], [3], 1);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end;
      silence ->
         encode_restricted_string(element(2,Val), [<<134>>]);
      time ->
         case element(2,Val) of
t12 -> encode_tags([<<135>>], [0], 1);
t24 -> encode_tags([<<135>>], [1], 1);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end;
      weekday ->
         encode_restricted_string(element(2,Val), [<<136>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_VarType'(Tlv) ->
   'dec_VarType'(Tlv, []).

'dec_VarType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'date'
    {131072, V1} -> 
        {date, case decode_integer(V1, []) of
0 -> mdy;
1 -> ymd;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end};


%% 'digits'
    {131073, V1} -> 
        {digits, case decode_integer(V1, []) of
0 -> gen;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end};


%% 'duration'
    {131074, V1} -> 
        {duration, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'month'
    {131075, V1} -> 
        {month, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'money'
    {131076, V1} -> 
        {money, case decode_integer(V1, []) of
0 -> cny;
1 -> eur;
2 -> usd;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end};


%% 'number'
    {131077, V1} -> 
        {number, case decode_integer(V1, []) of
0 -> crd;
1 -> ord;
2 -> cardinals;
3 -> ordinals;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end};


%% 'silence'
    {131078, V1} -> 
        {silence, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'time'
    {131079, V1} -> 
        {time, case decode_integer(V1, []) of
0 -> t12;
1 -> t24;
Default5 -> exit({error,{asn1,{illegal_enumerated,Default5}}})
end};


%% 'weekday'
    {131080, V1} -> 
        {weekday, begin
binary_to_list(decode_restricted_string(V1, []))
end
};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  VAR
%%================================
'enc_VAR'(Val) ->
    'enc_VAR'(Val, [<<48>>]).

'enc_VAR'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute vartype(1)   External RcsRpsMsg:VarType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_VarType'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute value(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute lang(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_VAR'(Tlv) ->
   'dec_VAR'(Tlv, [16]).

'dec_VAR'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute vartype(1)   External RcsRpsMsg:VarType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_VarType'(V1, [131072]),

%%-------------------------------------------------
%% attribute value(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

%%-------------------------------------------------
%% attribute lang(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'VAR', Term1, Term2, Term3}.



%%================================
%%  FileStruct
%%================================
'enc_FileStruct'(Val) ->
    'enc_FileStruct'(Val, []).

'enc_FileStruct'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      ttsfile ->
         'enc_TTS'(element(2,Val), [<<160>>]);
      filename ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      caption ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      var ->
         'enc_VAR'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_FileStruct'(Tlv) ->
   'dec_FileStruct'(Tlv, []).

'dec_FileStruct'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'ttsfile'
    {131072, V1} -> 
        {ttsfile, 'dec_TTS'(V1, [])};


%% 'filename'
    {131073, V1} -> 
        {filename, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'caption'
    {131074, V1} -> 
        {caption, decode_octet_string(V1, [])};


%% 'var'
    {131075, V1} -> 
        {var, 'dec_VAR'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  AudioVideo
%%================================
'enc_AudioVideo'(Val) ->
    'enc_AudioVideo'(Val, [<<48>>]).

'enc_AudioVideo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute audiofile(1)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute videofile(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute audiofmt(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute videofmt(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AudioVideo'(Tlv) ->
   'dec_AudioVideo'(Tlv, [16]).

'dec_AudioVideo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute audiofile(1)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_FileStruct'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute videofile(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute audiofmt(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute videofmt(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
binary_to_list(decode_restricted_string(V4, []))
end
, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'AudioVideo', Term1, Term2, Term3, Term4}.



%%================================
%%  VnTTS
%%================================
'enc_VnTTS'(Val) ->
    'enc_VnTTS'(Val, [<<48>>]).

'enc_VnTTS'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute file1(1)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute file2(2)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute file3(3)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute file4(4)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute file5(5)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute file6(6)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute file7(7)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute file8(8)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute file9(9)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute file10(10)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AudioVideo'(Cindex10, [<<169>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_VnTTS'(Tlv) ->
   'dec_VnTTS'(Tlv, [16]).

'dec_VnTTS'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute file1(1)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_AudioVideo'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute file2(2)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_AudioVideo'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute file3(3)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_AudioVideo'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute file4(4)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_AudioVideo'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute file5(5)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_AudioVideo'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute file6(6)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_AudioVideo'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute file7(7)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_AudioVideo'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute file8(8)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_AudioVideo'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute file9(9)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_AudioVideo'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute file10(10)   External RcsRpsMsg:AudioVideo OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_AudioVideo'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'VnTTS', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  FileArry
%%================================
'enc_FileArry'(Val) ->
    'enc_FileArry'(Val, [<<48>>]).

'enc_FileArry'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute file1(1)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute file2(2)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute file3(3)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute file4(4)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute file5(5)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute file6(6)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute file7(7)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute file8(8)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute file9(9)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute file10(10)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileStruct'(Cindex10, [<<169>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FileArry'(Tlv) ->
   'dec_FileArry'(Tlv, [16]).

'dec_FileArry'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute file1(1)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_FileStruct'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute file2(2)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_FileStruct'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute file3(3)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_FileStruct'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute file4(4)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_FileStruct'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute file5(5)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_FileStruct'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute file6(6)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_FileStruct'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute file7(7)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_FileStruct'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute file8(8)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_FileStruct'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute file9(9)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_FileStruct'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute file10(10)   External RcsRpsMsg:FileStruct OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_FileStruct'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'FileArry', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  AuPa
%%================================
'enc_AuPa'(Val) ->
    'enc_AuPa'(Val, [<<48>>]).

'enc_AuPa'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute file(1)   External RcsRpsMsg:FileArry OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FileArry'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute it(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute iv(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute du(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute sp(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute vl(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex7, [<<134>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AuPa'(Tlv) ->
   'dec_AuPa'(Tlv, [16]).

'dec_AuPa'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute file(1)   External RcsRpsMsg:FileArry OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_FileArry'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute it(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iv(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute du(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute sp(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute vl(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'AuPa', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  ViPa
%%================================
'enc_ViPa'(Val) ->
    'enc_ViPa'(Val, [<<48>>]).

'enc_ViPa'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute file(1)   External RcsRpsMsg:VnTTS OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_VnTTS'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute it(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute iv(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute du(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute sp(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute vl(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute mix(7)   External RcsRpsMsg:Mix OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Mix'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute ni(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex8, [<<135>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ViPa'(Tlv) ->
   'dec_ViPa'(Tlv, [16]).

'dec_ViPa'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute file(1)   External RcsRpsMsg:VnTTS OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_VnTTS'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute it(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iv(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute du(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute sp(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute vl(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute mix(7)   External RcsRpsMsg:Mix OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_Mix'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute ni(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_boolean(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'ViPa', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  Mix
%%================================
'enc_Mix'(Val) ->
    'enc_Mix'(Val, [<<48>>]).

'enc_Mix'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute mixable(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute volume(2)   External RcsRpsMsg:Volume OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Volume'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute audioLocal(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute audioRemote(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute videoLocal(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute videoRemote(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Mix'(Tlv) ->
   'dec_Mix'(Tlv, [16]).

'dec_Mix'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mixable(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_integer(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute volume(2)   External RcsRpsMsg:Volume OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_Volume'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute audioLocal(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute audioRemote(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute videoLocal(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute videoRemote(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'Mix', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  Volume
%%================================
'enc_Volume'(Val) ->
    'enc_Volume'(Val, [<<48>>]).

'enc_Volume'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute volumetype(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute volume(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Volume'(Tlv) ->
   'dec_Volume'(Tlv, [16]).

'dec_Volume'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute volumetype(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_integer(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute volume(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Volume', Term1, Term2}.



%%================================
%%  ConfPa
%%================================
'enc_ConfPa'(Val) ->
    'enc_ConfPa'(Val, [<<48>>]).

'enc_ConfPa'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute an(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute it(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute iv(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute du(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute sp(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute vl(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute ni(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex8, [<<135>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ConfPa'(Tlv) ->
   'dec_ConfPa'(Tlv, [16]).

'dec_ConfPa'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute an(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_An'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute it(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iv(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute du(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute sp(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute vl(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_integer(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute ni(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_boolean(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'ConfPa', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  AuPc
%%================================
'enc_AuPc'(Val) ->
    'enc_AuPc'(Val, [<<48>>]).

'enc_AuPc'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22, Cindex23, Cindex24, Cindex25, Cindex26} = Val,

%%-------------------------------------------------
%% attribute ip(1)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute rp(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute nd(3)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute fa(4)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute sa(5)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute tp(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute sp(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute vl(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute cb(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute mx(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute mn(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute fdt(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute idt(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute edt(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute na(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute dp(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute rsk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute rik(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex19, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute rtk(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex20, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute psk(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex21, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute stk(22) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex22, [<<149>>])
       end,

%%-------------------------------------------------
%% attribute sik(23) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes23,EncLen23} =  case Cindex23 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex23, [<<150>>])
       end,

%%-------------------------------------------------
%% attribute eik(24) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes24,EncLen24} =  case Cindex24 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex24, [<<151>>])
       end,

%%-------------------------------------------------
%% attribute iek(25) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes25,EncLen25} =  case Cindex25 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex25, [<<152>>])
       end,

%%-------------------------------------------------
%% attribute starttimer(26) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes26,EncLen26} =  case Cindex26 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex26, [<<153>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22, EncBytes23, EncBytes24, EncBytes25, EncBytes26],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22 + EncLen23 + EncLen24 + EncLen25 + EncLen26,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AuPc'(Tlv) ->
   'dec_AuPc'(Tlv, [16]).

'dec_AuPc'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ip(1)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_An'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute rp(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_An'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute nd(3)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_An'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute fa(4)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_An'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute sa(5)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_An'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute tp(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute sp(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_integer(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute vl(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute cb(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_integer(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute mx(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute mn(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute fdt(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute idt(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_integer(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute edt(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {decode_integer(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute na(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {decode_integer(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute dp(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {begin
binary_to_list(decode_restricted_string(V17, []))
end
, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute rsk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {begin
binary_to_list(decode_restricted_string(V18, []))
end
, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute rik(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {begin
binary_to_list(decode_restricted_string(V19, []))
end
, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute rtk(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {begin
binary_to_list(decode_restricted_string(V20, []))
end
, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute psk(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {begin
binary_to_list(decode_restricted_string(V21, []))
end
, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute stk(22) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131093,V22}|TempTlv23] ->
    {begin
binary_to_list(decode_restricted_string(V22, []))
end
, TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

%%-------------------------------------------------
%% attribute sik(23) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term23,Tlv24} = case Tlv23 of
[{131094,V23}|TempTlv24] ->
    {begin
binary_to_list(decode_restricted_string(V23, []))
end
, TempTlv24};
    _ ->
        { asn1_NOVALUE, Tlv23}
end,

%%-------------------------------------------------
%% attribute eik(24) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term24,Tlv25} = case Tlv24 of
[{131095,V24}|TempTlv25] ->
    {begin
binary_to_list(decode_restricted_string(V24, []))
end
, TempTlv25};
    _ ->
        { asn1_NOVALUE, Tlv24}
end,

%%-------------------------------------------------
%% attribute iek(25) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term25,Tlv26} = case Tlv25 of
[{131096,V25}|TempTlv26] ->
    {begin
binary_to_list(decode_restricted_string(V25, []))
end
, TempTlv26};
    _ ->
        { asn1_NOVALUE, Tlv25}
end,

%%-------------------------------------------------
%% attribute starttimer(26) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term26,Tlv27} = case Tlv26 of
[{131097,V26}|TempTlv27] ->
    {decode_boolean(V26, []), TempTlv27};
    _ ->
        { asn1_NOVALUE, Tlv26}
end,

case Tlv27 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv27}}}) % extra fields not allowed
end,
   {'AuPc', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22, Term23, Term24, Term25, Term26}.



%%================================
%%  ViPc
%%================================
'enc_ViPc'(Val) ->
    'enc_ViPc'(Val, [<<48>>]).

'enc_ViPc'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22, Cindex23, Cindex24, Cindex25, Cindex26, Cindex27} = Val,

%%-------------------------------------------------
%% attribute ip(1)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute rp(2)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute nd(3)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute fa(4)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute sa(5)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute tp(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute sp(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute vl(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute cb(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute mx(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute mn(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute fdt(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute idt(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute edt(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute na(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute dp(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute rsk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute rik(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex19, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute rtk(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex20, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute psk(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex21, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute stk(22) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex22, [<<149>>])
       end,

%%-------------------------------------------------
%% attribute sik(23) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes23,EncLen23} =  case Cindex23 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex23, [<<150>>])
       end,

%%-------------------------------------------------
%% attribute eik(24) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes24,EncLen24} =  case Cindex24 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex24, [<<151>>])
       end,

%%-------------------------------------------------
%% attribute iek(25) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes25,EncLen25} =  case Cindex25 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex25, [<<152>>])
       end,

%%-------------------------------------------------
%% attribute mix(26)   External RcsRpsMsg:Mix OPTIONAL
%%-------------------------------------------------
   {EncBytes26,EncLen26} =  case Cindex26 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Mix'(Cindex26, [<<185>>])
       end,

%%-------------------------------------------------
%% attribute starttimer(27) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes27,EncLen27} =  case Cindex27 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex27, [<<154>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22, EncBytes23, EncBytes24, EncBytes25, EncBytes26, EncBytes27],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22 + EncLen23 + EncLen24 + EncLen25 + EncLen26 + EncLen27,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ViPc'(Tlv) ->
   'dec_ViPc'(Tlv, [16]).

'dec_ViPc'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ip(1)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_Vn'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute rp(2)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_Vn'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute nd(3)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_Vn'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute fa(4)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_Vn'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute sa(5)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_Vn'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute tp(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute sp(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_integer(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute vl(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute cb(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_integer(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute mx(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute mn(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute fdt(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute idt(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_integer(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute edt(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {decode_integer(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute na(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {decode_integer(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute dp(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {begin
binary_to_list(decode_restricted_string(V17, []))
end
, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute rsk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {begin
binary_to_list(decode_restricted_string(V18, []))
end
, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute rik(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {begin
binary_to_list(decode_restricted_string(V19, []))
end
, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute rtk(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {begin
binary_to_list(decode_restricted_string(V20, []))
end
, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute psk(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {begin
binary_to_list(decode_restricted_string(V21, []))
end
, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute stk(22) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131093,V22}|TempTlv23] ->
    {begin
binary_to_list(decode_restricted_string(V22, []))
end
, TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

%%-------------------------------------------------
%% attribute sik(23) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term23,Tlv24} = case Tlv23 of
[{131094,V23}|TempTlv24] ->
    {begin
binary_to_list(decode_restricted_string(V23, []))
end
, TempTlv24};
    _ ->
        { asn1_NOVALUE, Tlv23}
end,

%%-------------------------------------------------
%% attribute eik(24) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term24,Tlv25} = case Tlv24 of
[{131095,V24}|TempTlv25] ->
    {begin
binary_to_list(decode_restricted_string(V24, []))
end
, TempTlv25};
    _ ->
        { asn1_NOVALUE, Tlv24}
end,

%%-------------------------------------------------
%% attribute iek(25) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term25,Tlv26} = case Tlv25 of
[{131096,V25}|TempTlv26] ->
    {begin
binary_to_list(decode_restricted_string(V25, []))
end
, TempTlv26};
    _ ->
        { asn1_NOVALUE, Tlv25}
end,

%%-------------------------------------------------
%% attribute mix(26)   External RcsRpsMsg:Mix OPTIONAL
%%-------------------------------------------------
{Term26,Tlv27} = case Tlv26 of
[{131097,V26}|TempTlv27] ->
    {'dec_Mix'(V26, []), TempTlv27};
    _ ->
        { asn1_NOVALUE, Tlv26}
end,

%%-------------------------------------------------
%% attribute starttimer(27) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term27,Tlv28} = case Tlv27 of
[{131098,V27}|TempTlv28] ->
    {decode_boolean(V27, []), TempTlv28};
    _ ->
        { asn1_NOVALUE, Tlv27}
end,

case Tlv28 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv28}}}) % extra fields not allowed
end,
   {'ViPc', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22, Term23, Term24, Term25, Term26, Term27}.



%%================================
%%  ConfPc
%%================================
'enc_ConfPc'(Val) ->
    'enc_ConfPc'(Val, [<<48>>]).

'enc_ConfPc'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22, Cindex23, Cindex24, Cindex25, Cindex26, Cindex27} = Val,

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ip(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute rp(3)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute nd(4)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute fa(5)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute sa(6)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute tp(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute ni(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute sp(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute vl(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute cb(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute mx(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute mn(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute fdt(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute idt(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute edt(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute na(17) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute dp(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute rsk(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex19, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute rik(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex20, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute rtk(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex21, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute psk(22) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex22, [<<149>>])
       end,

%%-------------------------------------------------
%% attribute stk(23) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes23,EncLen23} =  case Cindex23 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex23, [<<150>>])
       end,

%%-------------------------------------------------
%% attribute sik(24) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes24,EncLen24} =  case Cindex24 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex24, [<<151>>])
       end,

%%-------------------------------------------------
%% attribute eik(25) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes25,EncLen25} =  case Cindex25 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex25, [<<152>>])
       end,

%%-------------------------------------------------
%% attribute iek(26) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes26,EncLen26} =  case Cindex26 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex26, [<<153>>])
       end,

%%-------------------------------------------------
%% attribute starttimer(27) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes27,EncLen27} =  case Cindex27 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex27, [<<154>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22, EncBytes23, EncBytes24, EncBytes25, EncBytes26, EncBytes27],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22 + EncLen23 + EncLen24 + EncLen25 + EncLen26 + EncLen27,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ConfPc'(Tlv) ->
   'dec_ConfPc'(Tlv, [16]).

'dec_ConfPc'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute ip(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_An'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute rp(3)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_An'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute nd(4)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_An'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute fa(5)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_An'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute sa(6)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_An'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute tp(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_integer(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute ni(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_boolean(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute sp(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute vl(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_integer(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute cb(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute mx(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute mn(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute fdt(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_integer(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute idt(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {decode_integer(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute edt(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {decode_integer(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute na(17) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {decode_integer(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute dp(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {begin
binary_to_list(decode_restricted_string(V18, []))
end
, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute rsk(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {begin
binary_to_list(decode_restricted_string(V19, []))
end
, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute rik(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {begin
binary_to_list(decode_restricted_string(V20, []))
end
, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute rtk(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {begin
binary_to_list(decode_restricted_string(V21, []))
end
, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute psk(22) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131093,V22}|TempTlv23] ->
    {begin
binary_to_list(decode_restricted_string(V22, []))
end
, TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

%%-------------------------------------------------
%% attribute stk(23) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term23,Tlv24} = case Tlv23 of
[{131094,V23}|TempTlv24] ->
    {begin
binary_to_list(decode_restricted_string(V23, []))
end
, TempTlv24};
    _ ->
        { asn1_NOVALUE, Tlv23}
end,

%%-------------------------------------------------
%% attribute sik(24) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term24,Tlv25} = case Tlv24 of
[{131095,V24}|TempTlv25] ->
    {begin
binary_to_list(decode_restricted_string(V24, []))
end
, TempTlv25};
    _ ->
        { asn1_NOVALUE, Tlv24}
end,

%%-------------------------------------------------
%% attribute eik(25) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term25,Tlv26} = case Tlv25 of
[{131096,V25}|TempTlv26] ->
    {begin
binary_to_list(decode_restricted_string(V25, []))
end
, TempTlv26};
    _ ->
        { asn1_NOVALUE, Tlv25}
end,

%%-------------------------------------------------
%% attribute iek(26) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term26,Tlv27} = case Tlv26 of
[{131097,V26}|TempTlv27] ->
    {begin
binary_to_list(decode_restricted_string(V26, []))
end
, TempTlv27};
    _ ->
        { asn1_NOVALUE, Tlv26}
end,

%%-------------------------------------------------
%% attribute starttimer(27) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term27,Tlv28} = case Tlv27 of
[{131098,V27}|TempTlv28] ->
    {decode_boolean(V27, []), TempTlv28};
    _ ->
        { asn1_NOVALUE, Tlv27}
end,

case Tlv28 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv28}}}) % extra fields not allowed
end,
   {'ConfPc', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22, Term23, Term24, Term25, Term26, Term27}.



%%================================
%%  AuPr
%%================================
'enc_AuPr'(Val) ->
    'enc_AuPr'(Val, [<<48>>]).

'enc_AuPr'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22} = Val,

%%-------------------------------------------------
%% attribute ip(1)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute rp(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute ns(3)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute fa(4)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute sa(5)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute rf(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute sp(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute vl(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute cb(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute prt(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute pst(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute rlt(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute na(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute rsk(15) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute rik(16) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute rtk(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute psk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute stk(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex19, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute eik(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex20, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute rcdfmt(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex21, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute append(22) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex22, [<<149>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AuPr'(Tlv) ->
   'dec_AuPr'(Tlv, [16]).

'dec_AuPr'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ip(1)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_An'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute rp(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_An'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ns(3)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_An'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute fa(4)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_An'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute sa(5)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_An'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute rf(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
binary_to_list(decode_restricted_string(V6, []))
end
, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute sp(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_integer(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute vl(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute cb(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_integer(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute prt(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute pst(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute rlt(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute na(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_integer(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute rsk(15) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
binary_to_list(decode_restricted_string(V15, []))
end
, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute rik(16) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
binary_to_list(decode_restricted_string(V16, []))
end
, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute rtk(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {begin
binary_to_list(decode_restricted_string(V17, []))
end
, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute psk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {begin
binary_to_list(decode_restricted_string(V18, []))
end
, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute stk(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {begin
binary_to_list(decode_restricted_string(V19, []))
end
, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute eik(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {begin
binary_to_list(decode_restricted_string(V20, []))
end
, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute rcdfmt(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {begin
binary_to_list(decode_restricted_string(V21, []))
end
, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute append(22) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131093,V22}|TempTlv23] ->
    {decode_boolean(V22, []), TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

case Tlv23 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv23}}}) % extra fields not allowed
end,
   {'AuPr', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22}.



%%================================
%%  ConfPr
%%================================
'enc_ConfPr'(Val) ->
    'enc_ConfPr'(Val, [<<48>>]).

'enc_ConfPr'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22, Cindex23} = Val,

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ip(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute rp(3)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute ns(4)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute fa(5)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute sa(6)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_An'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute rf(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute ni(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute sp(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute vl(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute cb(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute prt(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute pst(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute rlt(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute na(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute rsk(16) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute rik(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute rtk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute psk(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex19, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute stk(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex20, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute eik(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex21, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute rcdfmt(22) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex22, [<<149>>])
       end,

%%-------------------------------------------------
%% attribute append(23) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes23,EncLen23} =  case Cindex23 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex23, [<<150>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22, EncBytes23],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22 + EncLen23,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ConfPr'(Tlv) ->
   'dec_ConfPr'(Tlv, [16]).

'dec_ConfPr'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute ip(2)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_An'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute rp(3)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_An'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute ns(4)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_An'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute fa(5)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_An'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute sa(6)   External RcsRpsMsg:An OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_An'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute rf(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
binary_to_list(decode_restricted_string(V7, []))
end
, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute ni(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_boolean(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute sp(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute vl(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_integer(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute cb(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute prt(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute pst(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute rlt(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_integer(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute na(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {decode_integer(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute rsk(16) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
binary_to_list(decode_restricted_string(V16, []))
end
, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute rik(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {begin
binary_to_list(decode_restricted_string(V17, []))
end
, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute rtk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {begin
binary_to_list(decode_restricted_string(V18, []))
end
, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute psk(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {begin
binary_to_list(decode_restricted_string(V19, []))
end
, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute stk(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {begin
binary_to_list(decode_restricted_string(V20, []))
end
, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute eik(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {begin
binary_to_list(decode_restricted_string(V21, []))
end
, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute rcdfmt(22) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131093,V22}|TempTlv23] ->
    {begin
binary_to_list(decode_restricted_string(V22, []))
end
, TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

%%-------------------------------------------------
%% attribute append(23) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term23,Tlv24} = case Tlv23 of
[{131094,V23}|TempTlv24] ->
    {decode_boolean(V23, []), TempTlv24};
    _ ->
        { asn1_NOVALUE, Tlv23}
end,

case Tlv24 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv24}}}) % extra fields not allowed
end,
   {'ConfPr', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22, Term23}.



%%================================
%%  ViPr
%%================================
'enc_ViPr'(Val) ->
    'enc_ViPr'(Val, [<<48>>]).

'enc_ViPr'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22} = Val,

%%-------------------------------------------------
%% attribute ip(1)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute rp(2)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute ns(3)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute fa(4)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute sa(5)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Vn'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute rf(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute sp(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute vl(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute cb(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute prt(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute pst(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute rlt(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute na(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute rsk(15) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute rik(16) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute rtk(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute psk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute stk(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex19, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute eik(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex20, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute rcdfmt(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex21, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute append(22) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex22, [<<149>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ViPr'(Tlv) ->
   'dec_ViPr'(Tlv, [16]).

'dec_ViPr'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ip(1)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_Vn'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute rp(2)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_Vn'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ns(3)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_Vn'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute fa(4)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_Vn'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute sa(5)   External RcsRpsMsg:Vn OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_Vn'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute rf(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
binary_to_list(decode_restricted_string(V6, []))
end
, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute ni(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute sp(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_integer(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute vl(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute cb(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_integer(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute prt(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute pst(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute rlt(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute na(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_integer(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute rsk(15) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
binary_to_list(decode_restricted_string(V15, []))
end
, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute rik(16) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
binary_to_list(decode_restricted_string(V16, []))
end
, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute rtk(17) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {begin
binary_to_list(decode_restricted_string(V17, []))
end
, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute psk(18) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {begin
binary_to_list(decode_restricted_string(V18, []))
end
, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute stk(19) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {begin
binary_to_list(decode_restricted_string(V19, []))
end
, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute eik(20) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {begin
binary_to_list(decode_restricted_string(V20, []))
end
, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute rcdfmt(21) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {begin
binary_to_list(decode_restricted_string(V21, []))
end
, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute append(22) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131093,V22}|TempTlv23] ->
    {decode_boolean(V22, []), TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

case Tlv23 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv23}}}) % extra fields not allowed
end,
   {'ViPr', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22}.



%%================================
%%  IntraEvent
%%================================
'enc_IntraEvent'(Val) ->
    'enc_IntraEvent'(Val, [<<48>>]).

'enc_IntraEvent'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute ntNetfail(2)   External RcsRpsMsg:NtNetfail OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NtNetfail'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute ntQualityalert(3)   External RcsRpsMsg:NtQualityalert OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NtQualityalert'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute rtpPltrans(4)   External RcsRpsMsg:RtpPltrans OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RtpPltrans'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute eventType(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute auOc(6)   External RcsRpsMsg:AuOc
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_AuOc'(Cindex6, [<<165>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraEvent'(Tlv) ->
   'dec_IntraEvent'(Tlv, [16]).

'dec_IntraEvent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute roomID(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_integer(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ntNetfail(2)   External RcsRpsMsg:NtNetfail OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_NtNetfail'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ntQualityalert(3)   External RcsRpsMsg:NtQualityalert OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_NtQualityalert'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute rtpPltrans(4)   External RcsRpsMsg:RtpPltrans OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_RtpPltrans'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute eventType(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5, [131076]),

%%-------------------------------------------------
%% attribute auOc(6)   External RcsRpsMsg:AuOc
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_AuOc'(V6, [131077]),

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'IntraEvent', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  NtNetfail
%%================================
'enc_NtNetfail'(Val) ->
    'enc_NtNetfail'(Val, [<<48>>]).

'enc_NtNetfail'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute keepActive(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute ntNetfailReturn(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_NtNetfail'(Tlv) ->
   'dec_NtNetfail'(Tlv, [16]).

'dec_NtNetfail'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute keepActive(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ntNetfailReturn(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'NtNetfail', Term1, Term2}.



%%================================
%%  NtQualityalert
%%================================
'enc_NtQualityalert'(Val) ->
    'enc_NtQualityalert'(Val, [<<48>>]).

'enc_NtQualityalert'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute keepActive(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute ntQalertThreshold(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_NtQualityalert'(Tlv) ->
   'dec_NtQualityalert'(Tlv, [16]).

'dec_NtQualityalert'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute keepActive(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ntQalertThreshold(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'NtQualityalert', Term1, Term2}.



%%================================
%%  RtpPltrans
%%================================
'enc_RtpPltrans'(Val) ->
    'enc_RtpPltrans'(Val, [<<48>>]).

'enc_RtpPltrans'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute keepActive(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute rtpPltransReturn(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RtpPltrans'(Tlv) ->
   'dec_RtpPltrans'(Tlv, [16]).

'dec_RtpPltrans'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute keepActive(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute rtpPltransReturn(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RtpPltrans', Term1, Term2}.



%%================================
%%  AuOc
%%================================
'enc_AuOc'(Val) ->
    'enc_AuOc'(Val, [<<48>>]).

'enc_AuOc'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute keepActive(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute auOcReturn(2)   External RcsRpsMsg:AuOcReturn OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AuOcReturn'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AuOc'(Tlv) ->
   'dec_AuOc'(Tlv, [16]).

'dec_AuOc'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute keepActive(1) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute auOcReturn(2)   External RcsRpsMsg:AuOcReturn OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_AuOcReturn'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'AuOc', Term1, Term2}.



%%================================
%%  AuOcReturn
%%================================
'enc_AuOcReturn'(Val) ->
    'enc_AuOcReturn'(Val, []).

'enc_AuOcReturn'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      auPaReturnCode ->
         'enc_PaReturnParam'(element(2,Val), [<<160>>]);
      auPcReturnParam ->
         'enc_PcReturnParam'(element(2,Val), [<<161>>]);
      auPrReturnParam ->
         'enc_PrReturnParam'(element(2,Val), [<<162>>]);
      viPaReturnCode ->
         'enc_PaReturnParam'(element(2,Val), [<<163>>]);
      viPcReturnParam ->
         'enc_PcReturnParam'(element(2,Val), [<<164>>]);
      viPrReturnParam ->
         'enc_PrReturnParam'(element(2,Val), [<<165>>]);
      confPaReturnCode ->
         'enc_PaReturnParam'(element(2,Val), [<<166>>]);
      confPcReturnParam ->
         'enc_PcReturnParam'(element(2,Val), [<<167>>]);
      confPrReturnParam ->
         'enc_PrReturnParam'(element(2,Val), [<<168>>]);
      sdpcReturnCode ->
         encode_integer(element(2,Val), [<<137>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_AuOcReturn'(Tlv) ->
   'dec_AuOcReturn'(Tlv, []).

'dec_AuOcReturn'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'auPaReturnCode'
    {131072, V1} -> 
        {auPaReturnCode, 'dec_PaReturnParam'(V1, [])};


%% 'auPcReturnParam'
    {131073, V1} -> 
        {auPcReturnParam, 'dec_PcReturnParam'(V1, [])};


%% 'auPrReturnParam'
    {131074, V1} -> 
        {auPrReturnParam, 'dec_PrReturnParam'(V1, [])};


%% 'viPaReturnCode'
    {131075, V1} -> 
        {viPaReturnCode, 'dec_PaReturnParam'(V1, [])};


%% 'viPcReturnParam'
    {131076, V1} -> 
        {viPcReturnParam, 'dec_PcReturnParam'(V1, [])};


%% 'viPrReturnParam'
    {131077, V1} -> 
        {viPrReturnParam, 'dec_PrReturnParam'(V1, [])};


%% 'confPaReturnCode'
    {131078, V1} -> 
        {confPaReturnCode, 'dec_PaReturnParam'(V1, [])};


%% 'confPcReturnParam'
    {131079, V1} -> 
        {confPcReturnParam, 'dec_PcReturnParam'(V1, [])};


%% 'confPrReturnParam'
    {131080, V1} -> 
        {confPrReturnParam, 'dec_PrReturnParam'(V1, [])};


%% 'sdpcReturnCode'
    {131081, V1} -> 
        {sdpcReturnCode, decode_integer(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  PaReturnParam
%%================================
'enc_PaReturnParam'(Val) ->
    'enc_PaReturnParam'(Val, [<<48>>]).

'enc_PaReturnParam'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute returnCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute pt(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PaReturnParam'(Tlv) ->
   'dec_PaReturnParam'(Tlv, [16]).

'dec_PaReturnParam'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute returnCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute pt(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PaReturnParam', Term1, Term2}.



%%================================
%%  PcReturnParam
%%================================
'enc_PcReturnParam'(Val) ->
    'enc_PcReturnParam'(Val, [<<48>>]).

'enc_PcReturnParam'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute returnCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ik(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute ap(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute na(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute dc(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute rc(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PcReturnParam'(Tlv) ->
   'dec_PcReturnParam'(Tlv, [16]).

'dec_PcReturnParam'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute returnCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute ik(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ap(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute na(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
binary_to_list(decode_restricted_string(V4, []))
end
, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute dc(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
binary_to_list(decode_restricted_string(V5, []))
end
, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute rc(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
binary_to_list(decode_restricted_string(V6, []))
end
, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'PcReturnParam', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  PrReturnParam
%%================================
'enc_PrReturnParam'(Val) ->
    'enc_PrReturnParam'(Val, [<<48>>]).

'enc_PrReturnParam'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute returnCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute vi(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute ap(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute na(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute ri(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute rc(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute rt(7) with type VisibleString
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_restricted_string(Cindex7, [<<134>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PrReturnParam'(Tlv) ->
   'dec_PrReturnParam'(Tlv, [16]).

'dec_PrReturnParam'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute returnCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute vi(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ap(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute na(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
binary_to_list(decode_restricted_string(V4, []))
end
, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute ri(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
binary_to_list(decode_restricted_string(V5, []))
end
, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute rc(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
binary_to_list(decode_restricted_string(V6, []))
end
, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute rt(7) with type VisibleString
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = begin
binary_to_list(decode_restricted_string(V7, [131078]))
end
,

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'PrReturnParam', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  IntraAddReply
%%================================
'enc_IntraAddReply'(Val) ->
    'enc_IntraAddReply'(Val, [<<48>>]).

'enc_IntraAddReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute addReturn(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute localSDP(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute localAddr(3)   External RcsRpsMsg:IntraIP4AddrList OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraIP4AddrList'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraAddReply'(Tlv) ->
   'dec_IntraAddReply'(Tlv, [16]).

'dec_IntraAddReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute addReturn(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute localSDP(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

%%-------------------------------------------------
%% attribute localAddr(3)   External RcsRpsMsg:IntraIP4AddrList OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_IntraIP4AddrList'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraAddReply', Term1, Term2, Term3}.



%%================================
%%  IntraSubReply
%%================================
'enc_IntraSubReply'(Val) ->
    'enc_IntraSubReply'(Val, [<<48>>]).

'enc_IntraSubReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute subReturn(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ntDur(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute ntOs(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute ntOr(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute rtpPs(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute rtpPr(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute rtpPl(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute rtpJit(8) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute rtpDelay(9) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraSubReply'(Tlv) ->
   'dec_IntraSubReply'(Tlv, [16]).

'dec_IntraSubReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute subReturn(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute ntDur(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ntOs(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute ntOr(4) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
binary_to_list(decode_restricted_string(V4, []))
end
, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute rtpPs(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
binary_to_list(decode_restricted_string(V5, []))
end
, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute rtpPr(6) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
binary_to_list(decode_restricted_string(V6, []))
end
, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute rtpPl(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
binary_to_list(decode_restricted_string(V7, []))
end
, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute rtpJit(8) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
binary_to_list(decode_restricted_string(V8, []))
end
, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute rtpDelay(9) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
binary_to_list(decode_restricted_string(V9, []))
end
, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'IntraSubReply', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  IntraModifyReply
%%================================
'enc_IntraModifyReply'(Val) ->
    'enc_IntraModifyReply'(Val, [<<48>>]).

'enc_IntraModifyReply'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute modifyReturn(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute localSDP(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraModifyReply'(Tlv) ->
   'dec_IntraModifyReply'(Tlv, [16]).

'dec_IntraModifyReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute modifyReturn(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute localSDP(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraModifyReply', Term1, Term2}.



%%================================
%%  IntraEventReply
%%================================
'enc_IntraEventReply'(Val) ->
    'enc_IntraEventReply'(Val, [<<48>>]).

'enc_IntraEventReply'(Val, TagIn) ->
   'enc_IntraEvent'(Val, TagIn).


'dec_IntraEventReply'(Tlv) ->
   'dec_IntraEventReply'(Tlv, [16]).

'dec_IntraEventReply'(Tlv, TagIn) ->
'dec_IntraEvent'(Tlv, TagIn).



%%================================
%%  IntraStopReply
%%================================
'enc_IntraStopReply'(Val) ->
    'enc_IntraStopReply'(Val, [<<48>>]).

'enc_IntraStopReply'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute operationID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute stopReturn(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute dur(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraStopReply'(Tlv) ->
   'dec_IntraStopReply'(Tlv, [16]).

'dec_IntraStopReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute operationID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute stopReturn(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute dur(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraStopReply', Term1, Term2, Term3}.



%%================================
%%  IntraAddConfirm
%%================================
'enc_IntraAddConfirm'(Val) ->
    'enc_IntraAddConfirm'(Val, [<<48>>]).

'enc_IntraAddConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute remoteSDP(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute remoteAddr(2)   External RcsRpsMsg:IntraIP4AddrList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraIP4AddrList'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraAddConfirm'(Tlv) ->
   'dec_IntraAddConfirm'(Tlv, [16]).

'dec_IntraAddConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute remoteSDP(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute remoteAddr(2)   External RcsRpsMsg:IntraIP4AddrList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_IntraIP4AddrList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraAddConfirm', Term1, Term2}.



%%================================
%%  IntraBridge
%%================================
'enc_IntraBridge'(Val) ->
    'enc_IntraBridge'(Val, [<<48>>]).

'enc_IntraBridge'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute calledEndPointID(1)   External RcsRpsMsg:TerminationStruct
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TerminationStruct'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute stop(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraBridge'(Tlv) ->
   'dec_IntraBridge'(Tlv, [16]).

'dec_IntraBridge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute calledEndPointID(1)   External RcsRpsMsg:TerminationStruct
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_TerminationStruct'(V1, [131072]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute stop(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraBridge', Term1, Term2, Term3}.



%%================================
%%  IntraExitRoom
%%================================
'enc_IntraExitRoom'(Val) ->
    'enc_IntraExitRoom'(Val, [<<48>>]).

'enc_IntraExitRoom'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute sourceRoomID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute returnCode(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraExitRoom'(Tlv) ->
   'dec_IntraExitRoom'(Tlv, [16]).

'dec_IntraExitRoom'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sourceRoomID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute returnCode(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraExitRoom', Term1, Term2}.



%%================================
%%  IntraNotification
%%================================
'enc_IntraNotification'(Val) ->
    'enc_IntraNotification'(Val, []).

'enc_IntraNotification'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      nbupResult ->
         encode_integer(element(2,Val), [<<128>>]);
      byteContent ->
         'enc_IntraBytes'(element(2,Val), [<<161>>]);
      notiValue ->
         encode_integer(element(2,Val), [<<130>>]);
      rtspSdp ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      rtspBegin ->
         encode_integer(element(2,Val), [<<132>>]);
      rtspEnd ->
         encode_integer(element(2,Val), [<<133>>]);
      rtspError ->
         encode_integer(element(2,Val), [<<134>>]);
      asn ->
         'enc_TerminationStructList'(element(2,Val), [<<167>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraNotification'(Tlv) ->
   'dec_IntraNotification'(Tlv, []).

'dec_IntraNotification'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'nbupResult'
    {131072, V1} -> 
        {nbupResult, decode_integer(V1, [])};


%% 'byteContent'
    {131073, V1} -> 
        {byteContent, 'dec_IntraBytes'(V1, [])};


%% 'notiValue'
    {131074, V1} -> 
        {notiValue, decode_integer(V1, [])};


%% 'rtspSdp'
    {131075, V1} -> 
        {rtspSdp, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'rtspBegin'
    {131076, V1} -> 
        {rtspBegin, decode_integer(V1, [])};


%% 'rtspEnd'
    {131077, V1} -> 
        {rtspEnd, decode_integer(V1, [])};


%% 'rtspError'
    {131078, V1} -> 
        {rtspError, decode_integer(V1, [])};


%% 'asn'
    {131079, V1} -> 
        {asn, 'dec_TerminationStructList'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  TerminationStructList
%%================================
'enc_TerminationStructList'(Val) ->
    'enc_TerminationStructList'(Val, [<<48>>]).

'enc_TerminationStructList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TerminationStructList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TerminationStructList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TerminationStructList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TerminationStruct'(H, [<<48>>]),
   'enc_TerminationStructList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TerminationStructList'(Tlv) ->
   'dec_TerminationStructList'(Tlv, [16]).

'dec_TerminationStructList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TerminationStruct'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  IntraBytes
%%================================
'enc_IntraBytes'(Val) ->
    'enc_IntraBytes'(Val, [<<48>>]).

'enc_IntraBytes'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute type(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute bytes(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraBytes'(Tlv) ->
   'dec_IntraBytes'(Tlv, [16]).

'dec_IntraBytes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute type(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute bytes(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraBytes', Term1, Term2}.



%%================================
%%  IntraRtsp
%%================================
'enc_IntraRtsp'(Val) ->
    'enc_IntraRtsp'(Val, []).

'enc_IntraRtsp'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      describle ->
         encode_integer(element(2,Val), [<<128>>]);
      announce ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      setup ->
         'enc_IntraRtspSetup'(element(2,Val), [<<162>>]);
      play ->
         'enc_IntraRtspPlay'(element(2,Val), [<<163>>]);
      record ->
         'enc_IntraRtspRecord'(element(2,Val), [<<164>>]);
      pause ->
         'enc_IntraRtspPause'(element(2,Val), [<<165>>]);
      teardown ->
         encode_integer(element(2,Val), [<<134>>]);
      options ->
         'enc_IntraRtspOpt'(element(2,Val), [<<167>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraRtsp'(Tlv) ->
   'dec_IntraRtsp'(Tlv, []).

'dec_IntraRtsp'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'describle'
    {131072, V1} -> 
        {describle, decode_integer(V1, [])};


%% 'announce'
    {131073, V1} -> 
        {announce, decode_octet_string(V1, [])};


%% 'setup'
    {131074, V1} -> 
        {setup, 'dec_IntraRtspSetup'(V1, [])};


%% 'play'
    {131075, V1} -> 
        {play, 'dec_IntraRtspPlay'(V1, [])};


%% 'record'
    {131076, V1} -> 
        {record, 'dec_IntraRtspRecord'(V1, [])};


%% 'pause'
    {131077, V1} -> 
        {pause, 'dec_IntraRtspPause'(V1, [])};


%% 'teardown'
    {131078, V1} -> 
        {teardown, decode_integer(V1, [])};


%% 'options'
    {131079, V1} -> 
        {options, 'dec_IntraRtspOpt'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraRtspSetup
%%================================
'enc_IntraRtspSetup'(Val) ->
    'enc_IntraRtspSetup'(Val, [<<48>>]).

'enc_IntraRtspSetup'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute streamType(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute mode(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute url(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute transport(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute ip(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute port(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute filepath(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraRtspSetup'(Tlv) ->
   'dec_IntraRtspSetup'(Tlv, [16]).

'dec_IntraRtspSetup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute streamType(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute mode(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute url(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute transport(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute ip(5) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
binary_to_list(decode_restricted_string(V5, []))
end
, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute port(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute filepath(7) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
binary_to_list(decode_restricted_string(V7, []))
end
, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'IntraRtspSetup', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  IntraRtspPlay
%%================================
'enc_IntraRtspPlay'(Val) ->
    'enc_IntraRtspPlay'(Val, [<<48>>]).

'enc_IntraRtspPlay'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute range(1)   External RcsRpsMsg:IntraRtspRange OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraRtspRange'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute scale(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute speed(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraRtspPlay'(Tlv) ->
   'dec_IntraRtspPlay'(Tlv, [16]).

'dec_IntraRtspPlay'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute range(1)   External RcsRpsMsg:IntraRtspRange OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_IntraRtspRange'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute scale(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute speed(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraRtspPlay', Term1, Term2, Term3}.



%%================================
%%  IntraRtspPause
%%================================
'enc_IntraRtspPause'(Val) ->
    'enc_IntraRtspPause'(Val, [<<48>>]).

'enc_IntraRtspPause'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute range(1)   External RcsRpsMsg:IntraRtspRange OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraRtspRange'(Cindex1, [<<48>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraRtspPause'(Tlv) ->
   'dec_IntraRtspPause'(Tlv, [16]).

'dec_IntraRtspPause'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute range(1)   External RcsRpsMsg:IntraRtspRange OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{16,V1}|TempTlv2] ->
    {'dec_IntraRtspRange'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'IntraRtspPause', Term1}.



%%================================
%%  IntraRtspRecord
%%================================
'enc_IntraRtspRecord'(Val) ->
    'enc_IntraRtspRecord'(Val, [<<48>>]).

'enc_IntraRtspRecord'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute range(1)   External RcsRpsMsg:IntraRtspRange OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraRtspRange'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute scale(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraRtspRecord'(Tlv) ->
   'dec_IntraRtspRecord'(Tlv, [16]).

'dec_IntraRtspRecord'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute range(1)   External RcsRpsMsg:IntraRtspRange OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_IntraRtspRange'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute scale(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraRtspRecord', Term1, Term2}.



%%================================
%%  IntraRtspRange
%%================================
'enc_IntraRtspRange'(Val) ->
    'enc_IntraRtspRange'(Val, [<<48>>]).

'enc_IntraRtspRange'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute npt(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute smpte(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute abst(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraRtspRange'(Tlv) ->
   'dec_IntraRtspRange'(Tlv, [16]).

'dec_IntraRtspRange'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute npt(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute smpte(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute abst(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraRtspRange', Term1, Term2, Term3}.



%%================================
%%  IntraRtspOpt
%%================================
'enc_IntraRtspOpt'(Val) ->
    'enc_IntraRtspOpt'(Val, []).

'enc_IntraRtspOpt'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      reserve ->
         encode_restricted_string(element(2,Val), [<<26>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraRtspOpt'(Tlv) ->
   'dec_IntraRtspOpt'(Tlv, []).

'dec_IntraRtspOpt'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'reserve'
    {26, V1} -> 
        {reserve, begin
binary_to_list(decode_restricted_string(V1, []))
end
};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraRtspRep
%%================================
'enc_IntraRtspRep'(Val) ->
    'enc_IntraRtspRep'(Val, []).

'enc_IntraRtspRep'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      describle ->
         'enc_IntraRtspDesRep'(element(2,Val), [<<160>>]);
      announce ->
         encode_integer(element(2,Val), [<<129>>]);
      setup ->
         encode_integer(element(2,Val), [<<130>>]);
      play ->
         encode_integer(element(2,Val), [<<131>>]);
      record ->
         encode_integer(element(2,Val), [<<132>>]);
      pause ->
         encode_integer(element(2,Val), [<<133>>]);
      teardown ->
         encode_integer(element(2,Val), [<<134>>]);
      options ->
         encode_integer(element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraRtspRep'(Tlv) ->
   'dec_IntraRtspRep'(Tlv, []).

'dec_IntraRtspRep'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'describle'
    {131072, V1} -> 
        {describle, 'dec_IntraRtspDesRep'(V1, [])};


%% 'announce'
    {131073, V1} -> 
        {announce, decode_integer(V1, [])};


%% 'setup'
    {131074, V1} -> 
        {setup, decode_integer(V1, [])};


%% 'play'
    {131075, V1} -> 
        {play, decode_integer(V1, [])};


%% 'record'
    {131076, V1} -> 
        {record, decode_integer(V1, [])};


%% 'pause'
    {131077, V1} -> 
        {pause, decode_integer(V1, [])};


%% 'teardown'
    {131078, V1} -> 
        {teardown, decode_integer(V1, [])};


%% 'options'
    {131079, V1} -> 
        {options, decode_integer(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraRtspDesRep
%%================================
'enc_IntraRtspDesRep'(Val) ->
    'enc_IntraRtspDesRep'(Val, [<<48>>]).

'enc_IntraRtspDesRep'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute result(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute sdp(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraRtspDesRep'(Tlv) ->
   'dec_IntraRtspDesRep'(Tlv, [16]).

'dec_IntraRtspDesRep'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute sdp(2) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraRtspDesRep', Term1, Term2}.



%%================================
%%  IntraOSD
%%================================
'enc_IntraOSD'(Val) ->
    'enc_IntraOSD'(Val, []).

'enc_IntraOSD'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      osdAdd ->
         'enc_IntraOSDAdd'(element(2,Val), [<<160>>]);
      osdDelete ->
         'enc_IntraOSDDelete'(element(2,Val), [<<161>>]);
      osdUpdate ->
         'enc_IntraOSDUpdate'(element(2,Val), [<<162>>]);
      osdHide ->
         'enc_IntraOSDHide'(element(2,Val), [<<163>>]);
      osdDisplay ->
         'enc_IntraOSDDisplay'(element(2,Val), [<<164>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraOSD'(Tlv) ->
   'dec_IntraOSD'(Tlv, []).

'dec_IntraOSD'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'osdAdd'
    {131072, V1} -> 
        {osdAdd, 'dec_IntraOSDAdd'(V1, [])};


%% 'osdDelete'
    {131073, V1} -> 
        {osdDelete, 'dec_IntraOSDDelete'(V1, [])};


%% 'osdUpdate'
    {131074, V1} -> 
        {osdUpdate, 'dec_IntraOSDUpdate'(V1, [])};


%% 'osdHide'
    {131075, V1} -> 
        {osdHide, 'dec_IntraOSDHide'(V1, [])};


%% 'osdDisplay'
    {131076, V1} -> 
        {osdDisplay, 'dec_IntraOSDDisplay'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraOSDRep
%%================================
'enc_IntraOSDRep'(Val) ->
    'enc_IntraOSDRep'(Val, []).

'enc_IntraOSDRep'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      osdAddReturn ->
         encode_integer(element(2,Val), [<<128>>]);
      osdDeleteReturn ->
         encode_integer(element(2,Val), [<<129>>]);
      osdUpdateReturn ->
         encode_integer(element(2,Val), [<<130>>]);
      osdHideReturn ->
         encode_integer(element(2,Val), [<<131>>]);
      osdDisplayReturn ->
         encode_integer(element(2,Val), [<<132>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraOSDRep'(Tlv) ->
   'dec_IntraOSDRep'(Tlv, []).

'dec_IntraOSDRep'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'osdAddReturn'
    {131072, V1} -> 
        {osdAddReturn, decode_integer(V1, [])};


%% 'osdDeleteReturn'
    {131073, V1} -> 
        {osdDeleteReturn, decode_integer(V1, [])};


%% 'osdUpdateReturn'
    {131074, V1} -> 
        {osdUpdateReturn, decode_integer(V1, [])};


%% 'osdHideReturn'
    {131075, V1} -> 
        {osdHideReturn, decode_integer(V1, [])};


%% 'osdDisplayReturn'
    {131076, V1} -> 
        {osdDisplayReturn, decode_integer(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraOSDAdd
%%================================
'enc_IntraOSDAdd'(Val) ->
    'enc_IntraOSDAdd'(Val, [<<48>>]).

'enc_IntraOSDAdd'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
send -> encode_tags([<<128>>], [0], 1);
'receive' -> encode_tags([<<128>>], [1], 1);
duplex -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute osdList(2)   External RcsRpsMsg:IntraOSDGroupList
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_IntraOSDGroupList'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDAdd'(Tlv) ->
   'dec_IntraOSDAdd'(Tlv, [16]).

'dec_IntraOSDAdd'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> send;
1 -> 'receive';
2 -> duplex;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute osdList(2)   External RcsRpsMsg:IntraOSDGroupList
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_IntraOSDGroupList'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraOSDAdd', Term1, Term2}.



%%================================
%%  IntraOSDDelete
%%================================
'enc_IntraOSDDelete'(Val) ->
    'enc_IntraOSDDelete'(Val, [<<48>>]).

'enc_IntraOSDDelete'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
send -> encode_tags([<<128>>], [0], 1);
'receive' -> encode_tags([<<128>>], [1], 1);
duplex -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute deleteLayer(2)   External RcsRpsMsg:IntraOSDGroupList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraOSDGroupList'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDDelete'(Tlv) ->
   'dec_IntraOSDDelete'(Tlv, [16]).

'dec_IntraOSDDelete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> send;
1 -> 'receive';
2 -> duplex;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute deleteLayer(2)   External RcsRpsMsg:IntraOSDGroupList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_IntraOSDGroupList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraOSDDelete', Term1, Term2}.



%%================================
%%  IntraOSDUpdate
%%================================
'enc_IntraOSDUpdate'(Val) ->
    'enc_IntraOSDUpdate'(Val, [<<48>>]).

'enc_IntraOSDUpdate'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
send -> encode_tags([<<128>>], [0], 1);
'receive' -> encode_tags([<<128>>], [1], 1);
duplex -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute updateList(2)   External RcsRpsMsg:IntraOSDGroupList
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_IntraOSDGroupList'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDUpdate'(Tlv) ->
   'dec_IntraOSDUpdate'(Tlv, [16]).

'dec_IntraOSDUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> send;
1 -> 'receive';
2 -> duplex;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute updateList(2)   External RcsRpsMsg:IntraOSDGroupList
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_IntraOSDGroupList'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraOSDUpdate', Term1, Term2}.



%%================================
%%  IntraOSDHide
%%================================
'enc_IntraOSDHide'(Val) ->
    'enc_IntraOSDHide'(Val, [<<48>>]).

'enc_IntraOSDHide'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
send -> encode_tags([<<128>>], [0], 1);
'receive' -> encode_tags([<<128>>], [1], 1);
duplex -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute hideLayer(2)   External RcsRpsMsg:IntraOSDGroupList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraOSDGroupList'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDHide'(Tlv) ->
   'dec_IntraOSDHide'(Tlv, [16]).

'dec_IntraOSDHide'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> send;
1 -> 'receive';
2 -> duplex;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute hideLayer(2)   External RcsRpsMsg:IntraOSDGroupList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_IntraOSDGroupList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraOSDHide', Term1, Term2}.



%%================================
%%  IntraOSDDisplay
%%================================
'enc_IntraOSDDisplay'(Val) ->
    'enc_IntraOSDDisplay'(Val, [<<48>>]).

'enc_IntraOSDDisplay'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
send -> encode_tags([<<128>>], [0], 1);
'receive' -> encode_tags([<<128>>], [1], 1);
duplex -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute displayLayer(2)   External RcsRpsMsg:IntraOSDGroupList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraOSDGroupList'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDDisplay'(Tlv) ->
   'dec_IntraOSDDisplay'(Tlv, [16]).

'dec_IntraOSDDisplay'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute direction(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> send;
1 -> 'receive';
2 -> duplex;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute displayLayer(2)   External RcsRpsMsg:IntraOSDGroupList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_IntraOSDGroupList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraOSDDisplay', Term1, Term2}.



%%================================
%%  OSDDirection
%%================================
'enc_OSDDirection'(Val) ->
    'enc_OSDDirection'(Val, [<<10>>]).

'enc_OSDDirection'(Val, TagIn) ->
case Val of
send -> encode_tags(TagIn, [0], 1);
'receive' -> encode_tags(TagIn, [1], 1);
duplex -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_OSDDirection'(Tlv) ->
   'dec_OSDDirection'(Tlv, [10]).

'dec_OSDDirection'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> send;
1 -> 'receive';
2 -> duplex;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  IntraOSDGroupList
%%================================
'enc_IntraOSDGroupList'(Val) ->
    'enc_IntraOSDGroupList'(Val, [<<48>>]).

'enc_IntraOSDGroupList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IntraOSDGroupList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_IntraOSDGroupList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IntraOSDGroupList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_IntraOSDGroup'(H, [<<48>>]),
   'enc_IntraOSDGroupList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IntraOSDGroupList'(Tlv) ->
   'dec_IntraOSDGroupList'(Tlv, [16]).

'dec_IntraOSDGroupList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_IntraOSDGroup'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  IntraOSDGroup
%%================================
'enc_IntraOSDGroup'(Val) ->
    'enc_IntraOSDGroup'(Val, [<<48>>]).

'enc_IntraOSDGroup'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute groupID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute layerID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute groupState(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute groupAttr(4)   External RcsRpsMsg:IntraOSDGroupAttr OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraOSDGroupAttr'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute wallPaper(5)   External RcsRpsMsg:IntraOSDWallPaper OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraOSDWallPaper'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDGroup'(Tlv) ->
   'dec_IntraOSDGroup'(Tlv, [16]).

'dec_IntraOSDGroup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute groupID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute layerID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute groupState(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute groupAttr(4)   External RcsRpsMsg:IntraOSDGroupAttr OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_IntraOSDGroupAttr'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute wallPaper(5)   External RcsRpsMsg:IntraOSDWallPaper OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_IntraOSDWallPaper'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'IntraOSDGroup', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  IntraOSDGroupAttr
%%================================
'enc_IntraOSDGroupAttr'(Val) ->
    'enc_IntraOSDGroupAttr'(Val, []).

'enc_IntraOSDGroupAttr'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      osdTextDescript ->
         'enc_IntraOSDTextDescript'(element(2,Val), [<<160>>]);
      osdImageDescript ->
         'enc_IntraOSDImageDescript'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_IntraOSDGroupAttr'(Tlv) ->
   'dec_IntraOSDGroupAttr'(Tlv, []).

'dec_IntraOSDGroupAttr'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'osdTextDescript'
    {131072, V1} -> 
        {osdTextDescript, 'dec_IntraOSDTextDescript'(V1, [])};


%% 'osdImageDescript'
    {131073, V1} -> 
        {osdImageDescript, 'dec_IntraOSDImageDescript'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  IntraOSDWallPaper
%%================================
'enc_IntraOSDWallPaper'(Val) ->
    'enc_IntraOSDWallPaper'(Val, [<<48>>]).

'enc_IntraOSDWallPaper'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute wallColorSchema(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute wallColorValue(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute wallImage(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDWallPaper'(Tlv) ->
   'dec_IntraOSDWallPaper'(Tlv, [16]).

'dec_IntraOSDWallPaper'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute wallColorSchema(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_integer(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute wallColorValue(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute wallImage(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IntraOSDWallPaper', Term1, Term2, Term3}.



%%================================
%%  IntraOSDTextDescript
%%================================
'enc_IntraOSDTextDescript'(Val) ->
    'enc_IntraOSDTextDescript'(Val, [<<48>>]).

'enc_IntraOSDTextDescript'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21} = Val,

%%-------------------------------------------------
%% attribute osdTextString(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute osdTextFont(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute osdTextSize(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute osdTextStyle(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute osdCharInstead(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute posTop(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute posLeft(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute frontColorSchema(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute frontColorValue(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute frontAlpha(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute bgColorSchema(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute bgColorValue(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute bgAlpha(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute charSpace(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute lineSpace(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute areaWidth(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute areaHeight(17) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute charCountInLine(18) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute lineCount(19) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex19, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute textFlash(20) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex20, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute textMoving(21) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex21, [<<148>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDTextDescript'(Tlv) ->
   'dec_IntraOSDTextDescript'(Tlv, [16]).

'dec_IntraOSDTextDescript'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute osdTextString(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute osdTextFont(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute osdTextSize(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute osdTextStyle(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute osdCharInstead(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute posTop(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute posLeft(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_integer(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute frontColorSchema(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_integer(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute frontColorValue(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute frontAlpha(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_integer(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute bgColorSchema(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute bgColorValue(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute bgAlpha(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute charSpace(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_integer(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute lineSpace(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {decode_integer(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute areaWidth(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {decode_integer(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute areaHeight(17) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {decode_integer(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute charCountInLine(18) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {decode_integer(V18, []), TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute lineCount(19) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {decode_integer(V19, []), TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute textFlash(20) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {decode_integer(V20, []), TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute textMoving(21) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {decode_integer(V21, []), TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

case Tlv22 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv22}}}) % extra fields not allowed
end,
   {'IntraOSDTextDescript', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21}.



%%================================
%%  IntraOSDImageDescript
%%================================
'enc_IntraOSDImageDescript'(Val) ->
    'enc_IntraOSDImageDescript'(Val, [<<48>>]).

'enc_IntraOSDImageDescript'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute imagePath(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute imageBgDisplay(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute imageAlpha(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute imageFlash(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute imageMoving(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute posTop(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute posLeft(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex7, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute zoomType(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute imageWidth(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute imageHeight(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<140>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraOSDImageDescript'(Tlv) ->
   'dec_IntraOSDImageDescript'(Tlv, [16]).

'dec_IntraOSDImageDescript'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute imagePath(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute imageBgDisplay(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute imageAlpha(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute imageFlash(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute imageMoving(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute posTop(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131080,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute posLeft(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131081,V7}|TempTlv8] ->
    {decode_integer(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute zoomType(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131082,V8}|TempTlv9] ->
    {decode_integer(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute imageWidth(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131083,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute imageHeight(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131084,V10}|TempTlv11] ->
    {decode_integer(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'IntraOSDImageDescript', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  IntraTestAlive
%%================================
'enc_IntraTestAlive'(Val) ->
    'enc_IntraTestAlive'(Val, [<<48>>]).

'enc_IntraTestAlive'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute seqNo(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute rcsMediaType(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraTestAlive'(Tlv) ->
   'dec_IntraTestAlive'(Tlv, [16]).

'dec_IntraTestAlive'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute seqNo(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute rcsMediaType(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IntraTestAlive', Term1, Term2}.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_bitstring2(1,
                  Unused,
                  <<B7:1,B6:1,B5:1,B4:1,B3:1,B2:1,B1:1,B0:1,_/binary>>) ->
    lists:sublist([B7,B6,B5,B4,B3,B2,B1,B0], 8 - Unused);
decode_bitstring2(Len,
                  Unused,
                  <<B7:1,
                    B6:1,
                    B5:1,
                    B4:1,
                    B3:1,
                    B2:1,
                    B1:1,
                    B0:1,
                    Buffer/binary>>) ->
    [B7,B6,B5,B4,B3,B2,B1,B0|decode_bitstring2(Len - 1, Unused, Buffer)].

decode_bitstring_NNL(BitList, NamedNumberList) ->
    decode_bitstring_NNL(BitList, NamedNumberList, 0, []).

decode_bitstring_NNL([], _, _No, Result) ->
    lists:reverse(Result);
decode_bitstring_NNL([B|BitList],
                     [{Name,No}|NamedNumberList],
                     No,
                     Result) ->
    if
        B =:= 0 ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 Result);
        true ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 [Name|Result])
    end;
decode_bitstring_NNL([1|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList,
                         NamedNumberList,
                         No + 1,
                         [{bit,No}|Result]);
decode_bitstring_NNL([0|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList, NamedNumberList, No + 1, Result).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_named_bit_string(Buffer, NamedNumberList, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            [];
        <<Unused,Bits/binary>> ->
            BitString = decode_bitstring2(byte_size(Bits), Unused, Bits),
            decode_bitstring_NNL(BitString, NamedNumberList)
    end.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

do_encode_named_bit_string([FirstVal|RestVal], NamedBitList, TagIn) ->
    ToSetPos = get_all_bitposes([FirstVal|RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = make_and_set_list(Size, ToSetPos, 0),
    {Len,Unused,OctetList} = encode_bitstring(BitList),
    encode_tags(TagIn, [Unused|OctetList], Len + 1).

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Val], 1);
encode_bitstring(Val) ->
    {Unused,Octet} = unused_bitlist(Val, 7, 0),
    {1,Unused,[Octet]}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest], Ack, Len) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Ack,Val], Len + 1);
encode_bitstring([], Ack, Len) ->
    {Len,0,Ack};
encode_bitstring(Rest, Ack, Len) ->
    {Unused,Val} = unused_bitlist(Rest, 7, 0),
    {Len + 1,Unused,[Ack,Val]}.

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_named_bit_string([H|_] = Bits, NamedBitList, TagIn)
    when is_atom(H) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([{bit,_}|_] = Bits, NamedBitList, TagIn) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string(Bits, _NamedBitList, TagIn)
    when is_bitstring(Bits) ->
    encode_unnamed_bit_string(Bits, TagIn).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

get_all_bitposes([{bit,ValPos}|Rest], NamedBitList, Ack) ->
    get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
get_all_bitposes([Val|Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName,ValPos} ->
            get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
        _ ->
            exit({error,{asn1,{bitstring_namedbit,Val}}})
    end;
get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

make_and_set_list(0, [], _) ->
    [];
make_and_set_list(0, _, _) ->
    exit({error,{asn1,bitstring_sizeconstraint}});
make_and_set_list(Len, [XPos|SetPos], XPos) ->
    [1|make_and_set_list(Len - 1, SetPos, XPos + 1)];
make_and_set_list(Len, [Pos|SetPos], XPos) ->
    [0|make_and_set_list(Len - 1, [Pos|SetPos], XPos + 1)];
make_and_set_list(Len, [], XPos) ->
    [0|make_and_set_list(Len - 1, [], XPos + 1)].

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

unused_bitlist([], Trail, Ack) ->
    {Trail + 1,Ack};
unused_bitlist([Bit|Rest], Trail, Ack) ->
    unused_bitlist(Rest, Trail - 1, Bit bsl Trail bor Ack).
