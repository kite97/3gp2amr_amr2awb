    此目录下是imp所有有关测试的数据和脚本，除了与imp直接相关的部分，也可能包含其
他网元的部分，比如配合测试的cn业务等。
    就阶段而言，测试分为开发时测试和发布时测试。前者用于开发及重构时快速确认基本
的修改是否达到预期目的，后者则用来确认功能达到预期，并且系统达到一定程度的可用性。
    就测试目的而言，测试分为功能测试，性能测试和稳定性测试，在版本发布前，需逐
一测试通过，全部测试均通过则视为一次有效发布。
    “发布时测试”原则上在svn主线上进行，“开发时测试”则可以在任何分支上进行，特别地，
分支合并回主线之前，需完成功能测试，但性能和稳定性测试则可根据分支目的做一定取舍。
当分支合并之前，分支代码如果与主线代码一致，发布时测试可以选择在分支进行，来确保
主线代码的稳定性。

功能测试（Capability Test）：
    平日开发不需每日全量功能测试，功能测试主要体现在阶段性功能验证，旧有功能没有
受影响，新功能添加完成，以及重构时确保功能正常。
    功能测试包括大部分的脚本自动测试，以及少量的手动测试，开发时的测试可以针对受
影响的部分拆解测试，具体测试方法参见 ocarina_test_environment_configuration。

性能及稳定性测试中，选择负载阀值和时间值的依据：
    性能上限的目的是保证系统可以在不引起崩溃的情况下，提供最大的服务能力，选择70%是
保证服务器上其他系统进程可以正常工作，进而保证整体的稳定性。性能测试得到的数据将
影响现网装机量和系统配置时指定的最大值。
    稳定性测试的目的是尽可能的保证系统长时间的稳定运行，取50%的cpu占用率，测试稳
定运行的时间。

性能测试（Performance Test）：
    性能测试的标准是指定确定的测试模型和机型，增加系统负载（如增加caps数），
直至系统能稳定运行的高点，并且在高点运行2小时，则确认系统的性能上限是xxcaps。运
行在高点时，要求cpu占用率要小于75%，且尽量在70%到75%之间。达不到2小时的高点不能
定为系统上限。性能上限需确认测试模型，以caps数标称上限，如：xx模型性能，最高110caps。
    性能测试除了要求稳定在高点运行2小时以外，还有其他验收指标：
    1、呼损必须在0.01%以下
    2、平均响应时间500ms以内
    性能测试针对模块不同有可能只需要imp和测试用imp，也可能需要cn及rcs,rps共同测试，
用于发布的性能测试原则上以MS(rcs,rps,imp)为一个整体进行测试。

稳定性测试（Stability Test）：
    稳定性测试的测试模型与机型整体与性能测试一致，但运行时要求cpu稳定在50%左右，
并保持运行24小时以上，其他验收指标与性能测试一致。

当前使用的测试模型集合（注：此集合并不是所有功能组合的全集，而是根据需要设计的
测试集合，模型编号以“M+数字”的形式表示）：
    M1: 放音类
        M1.1：alaw, play，16s，源文件为pcm8k8_wav
        M1.2：ulaw, play，16s，源文件为pcm8k8_wav
        M1.3：amrnb_7, play, 16s, 源文件为amrnb_7 
        M1.4：amrwb_8, play, 16s, 源文件为amrwb_8
        M1.5：amrnb_7, play, 16s, 源文件为wav8k16_wav 
        M1.6：amrwb_8, play, 16s, 源文件为wav16k16_wav

    M2: 收号类：
         不单独设置，与放音收号同测

    M3：放音收号类：
         M3.1：alaw, aupc，dtmf，16s，源文件为pcm8k8_wav
         M3.2：alaw, aupc，2833，16s，源文件为pcm8k8_wav
         M3.3：amrnb_7, aupc，2833，16s，源文件为amrnb_7 
         M3.4：amrwb_8, aupc，2833，16s，源文件为amrwb_8

    M4：录音类：
        M4.1：alaw, play_dc_rec, play_16s, rec_16s, 源文件为pcm8k8_wav，录音文件为...
        M4.2：amrnb_7, play_dc_rec, play_16s, rec_16s, 源文件为amrnb_7，录音文件为...
        M4.3：amrwb_8, play_dc_rec, play_16s, rec_16s, 源文件为amrwb_8，录音文件为...

    M5：会议类：
        M5.1：alaw, conf，3-way，60s
        M5.2：amrnb, conf，3-way，60s

测试的有效性：
    功能测试对代码版本有效，代码修改后需要重新测试。
    同一版本的代码，性能和稳定性测试的数据只对某一具体的硬件型号和操作系统版本有
效，不同的机型和操作系统需要重新测试。

测试模型的选择：
    为减少测试所需资源，可以适当缩减测试量，只测试前文所述各种测试模型的一部分，
模型的选择原则是：性能测试以现网应用为准，用得多的尽量测试；稳定性测试以代码覆盖
率为准，覆盖越多的越优先，并参考现网用量。例如，现网更多的使用单纯放音，所以做性
能测试时优先测试放音，而录音用得较少，在资源有限时，可以舍弃；而对于稳定性，放音
收号整体上覆盖了放音和收号部分的代码，所以相较于单纯放音，稳定性测试优选放音收号，
但是录音现网应用较少，虽然代码覆盖量更大，但现网应用较少，所以优先级降低。针对于
特别修改的部分，比如某个版本修改了会议混音算法，则会议部分的模型应特别测试。以上
原则的目的在于尽量保证数据有效的情况下，减少测试所需时间和资源。为保证最基本功能
的正确性，在以上规则外特别确定必测项，每次发布均需测试。以下给出必选模型及模型选择
的优先级。

性能测试必选模型：
    M1.1，M3.1，M5.1

稳定性测试必选模型：
    M3.1，M3.3，M5.2


数据记录规范：
    以上各模型的性能测试结果命名规则：Performance(M1.1)简写P1.1
    以上各模型的稳定性测试结果命名规则：Stability(M1.1)简写S1.1
    （内部结构暂无）

特别换算比例：
    如果代码没有整体调整，可以使用基准模型推测其他模型的能力。如果现网需要数据而
发布版本没有进行相关测试时，可以据此给出经验值。 如P1.3=R1*P1.1。
    基准模型为M1.1，M3.1和M5.1。由于在同一类模型如M1中，不同的子模型M1.1~M1.6，
在IMP软件的处理流程基本相同，因此可以利用以下的性能换算比例。
    R1.  M1.1与M1.3的换算比例
    R2.  M1.1与M1.4的换算比例
    R3.  M1.1与M1.5的换算比例
    R4.  M1.1与M1.6的换算比例
    R5.  M3.1与M3.2的换算比例
    R6.  M3.1与M3.3的换算比例
    R7.  M3.1与M3.4的换算比例
    R8.  M5.1与M5.2的换算比例
    在某模型性能可能发生变化时，需要重新计算相关比例。如修改了PCM到AMR-NB的编解
码算法，需要重新测试编解码相关模型的比例R3, R8。
